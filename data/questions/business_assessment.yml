---
# Business Assessment Module - Memory-Efficient with Validation Loops
objects:
  - company: Individual
---
objects from file:
  - naics_data: data/sources/naics.json
---
question: |
  Privacy Compliance Assessment
subquestion: |
  This assessment will determine which privacy laws apply to your business and generate appropriate documentation.
  
  **What we'll assess:**
  * Business profile and industry classification
  * Geographic scope and data processing activities
  * Applicable privacy law requirements
  * Required documentation and compliance gaps
  
  **Time required:** Approximately 10-15 minutes
  
  **Important:** This tool provides informational guidance only and does not constitute legal advice.

continue button field: show_intro
continue button label: "Begin Assessment"
---
# Step 1a: Basic Business Information
question: |
  Step 1a: Basic Business Information
fields:
  - Company Name: company.name
    required: True
    help: Legal name of your business entity
  - Number of Employees: company.employee_count
    datatype: integer
    required: True
    min: 0
    help: Total number of employees (full-time, part-time, contractors)
  - Annual Revenue (USD): company.annual_revenue
    datatype: currency
    required: True
    min: 0
    help: Gross annual revenue for most recent complete fiscal year
continue button field: basic_business_info_complete
continue button label: "Continue"
---
# Step 1b: Industry Classification
question: |
  Step 1b: Industry Classification
subquestion: |
  Select your primary business activity. This determines industry-specific privacy requirements.
fields:
  - Primary Business Activity (NAICS Code): company.naics_code
    required: True
    datatype: combobox
    choices:
      code: get_naics_choices()
    help: |
      Search by typing keywords (e.g., "legal services", "software", "retail")
continue button field: naics_selection_complete
continue button label: "Continue"
---
# Step 1c: Business Information Verification with Correction Loop
question: |
  Step 1c: Verify Business Information
subquestion: |
  Please verify this information is correct:
  
  **Company**: ${ company.name }  
  **Industry**: ${ get_industry_category(company.naics_code) }  
  **NAICS Code**: ${ format_naics_display(company.naics_code) }  
  **Employees**: ${ "{:,}".format(int(company.employee_count)) }  
  **Annual Revenue**: ${ "${:,.0f}".format(float(company.annual_revenue)) }
  
  % if has_sectoral_requirements(company.naics_code):
  **Note**: Your industry classification indicates potential sector-specific privacy requirements.
  % endif

fields:
  - "Is this information correct?": business_info_verified
    datatype: yesnoradio
    required: True
  - "What needs correction?": correction_needed
    datatype: checkboxes
    choices:
      - "Company name"
      - "NAICS code" 
      - "Employee count"
      - "Annual revenue"
    show if:
      variable: business_info_verified
      is: False
    required: True
under: |
  If any information is incorrect, select "No" to make corrections.
continue button field: verification_complete
continue button label: "Continue"
---
# Memory-efficient correction handling
code: |
  # Process verification without infinite loops
  verification_complete
  
  if not business_info_verified:
    # Clear cached data to prevent memory issues
    cache_vars_to_clear = ['naics_choices_cache', 'cached_industry', 'sba_size_standards']
    for var_name in cache_vars_to_clear:
      if defined(var_name):
        undefine(var_name)
    
    # Selectively clear only what needs correction
    if "Company name" in correction_needed.true_values():
      undefine('company.name')
      undefine('basic_business_info_complete')
    if "NAICS code" in correction_needed.true_values(): 
      undefine('company.naics_code')
      undefine('naics_selection_complete')
    if "Employee count" in correction_needed.true_values():
      undefine('company.employee_count')
      undefine('basic_business_info_complete')
    if "Annual revenue" in correction_needed.true_values():
      undefine('company.annual_revenue')
      undefine('basic_business_info_complete')
    
    # Prevent infinite loop with attempt tracking
    if not defined('correction_attempts'):
      correction_attempts = 1
    else:
      correction_attempts += 1
    
    # Emergency exit after 3 attempts
    if correction_attempts > 3:
      business_info_verified = True
      log("Emergency exit from correction loop after 3 attempts")
  
  # Continue workflow
  business_profile_complete = True
---
# Step 2: Geographic and Operational Scope
question: |
  Step 2: Geographic and Operational Scope
fields:
  - "Does your business have a website?": business_has_website
    datatype: yesnowide
  - "Does your business have physical locations where customers visit?": business_has_physical_location
    datatype: yesnowide
  - "In which states/regions do you have business operations?": states_with_operations
    datatype: checkboxes
    choices:
      - California
      - Texas
      - New York
      - Virginia
      - Florida
      - Illinois
      - Other US states
    required: False
  - "Do you serve customers or clients in the European Union?": serves_eu
    datatype: yesnowide
  - "Do you have an establishment (office, subsidiary, etc.) in the EU?": has_eu_establishment
    datatype: yesnowide
continue button field: geographic_scope_complete
continue button label: "Continue"
---
# Step 3: Data Processing Volume
question: |
  Step 3: Data Processing Volume
subquestion: |
  Provide approximate annual numbers for personal data processing:
fields:
  - "California residents' data processed annually": california_records
    datatype: integer
    default: 0
    help: Include customers, employees, vendors, website visitors, etc.
  - "Texas residents' data processed annually": texas_records
    datatype: integer
    default: 0
    help: Include customers, employees, vendors, website visitors, etc.
  - "EU data subjects processed annually": eu_data_subjects
    datatype: integer
    default: 0
    help: Include any EU residents whose data you process
  - "Do you sell personal information to third parties?": sells_personal_info
    datatype: yesnowide
    help: This includes sharing for advertising, marketing lists, or other commercial purposes
continue button field: data_volume_complete
continue button label: "Continue to Analysis"
---
# Memory-efficient NAICS functions
code: |
  def get_naics_choices():
    """Load NAICS choices efficiently - limit to prevent timeout"""
    try:
      # Load from imported naics_data object
      if defined('naics_data') and naics_data:
        choices = []
        count = 0
        for item in naics_data:
          if count >= 100:  # Limit choices to prevent timeout
            break
          if isinstance(item, dict) and 'id' in item and 'description' in item:
            naics_code = str(item['id'])
            description = str(item['description'])
            
            # Truncate long descriptions
            if len(description) > 60:
              description = description[:57] + "..."
            
            choices.append((naics_code, description))
            count += 1
        
        # Sort by description and return immediately
        return sorted(choices, key=lambda x: x[1])
      
      else:
        # Fallback choices if data loading fails
        return get_fallback_naics_choices()
        
    except Exception as e:
      log(f"NAICS loading error: {e}")
      return get_fallback_naics_choices()
  
  def get_fallback_naics_choices():
    """Essential fallback NAICS choices"""
    return [
      ('541110', 'Offices of Lawyers'),
      ('541613', 'Marketing Consulting Services'),
      ('541511', 'Custom Computer Programming Services'),
      ('541512', 'Computer Systems Design Services'),
      ('621111', 'Offices of Physicians'),
      ('621210', 'Offices of Dentists'),
      ('522110', 'Commercial Banking'),
      ('523110', 'Investment Banking and Securities'),
      ('524113', 'Direct Life Insurance Carriers'),
      ('541211', 'Offices of Certified Public Accountants'),
      ('722511', 'Full-Service Restaurants'),
      ('999999', 'Other - Please specify in additional information')
    ]
  
  def get_industry_category(naics_code):
    """Get broad industry category from NAICS code"""
    if not naics_code:
      return "Other"
    
    # Map based on NAICS 2-digit sectors
    sector = str(naics_code)[:2] if len(str(naics_code)) >= 2 else ""
    sector_mapping = {
      '11': 'Agriculture', '21': 'Mining', '22': 'Utilities', '23': 'Construction',
      '31': 'Manufacturing', '32': 'Manufacturing', '33': 'Manufacturing',
      '42': 'Wholesale Trade', '44': 'Retail', '45': 'Retail',
      '48': 'Transportation', '49': 'Transportation', '51': 'Technology',
      '52': 'Financial Services', '53': 'Real Estate', '54': 'Professional Services',
      '55': 'Management', '56': 'Administrative Services', '61': 'Education',
      '62': 'Healthcare', '71': 'Arts & Entertainment', '72': 'Food Service',
      '81': 'Other Services', '92': 'Public Administration'
    }
    
    return sector_mapping.get(sector, 'Other')
  
  def has_sectoral_requirements(naics_code):
    """Check if NAICS code indicates sector-specific requirements"""
    if not naics_code:
      return False
    
    # Healthcare (potential HIPAA)
    if str(naics_code).startswith('62'):
      return True
    
    # Financial Services (potential GLBA)
    if str(naics_code).startswith('52'):
      return True
    
    return False
  
  def format_naics_display(naics_code):
    """Format NAICS code for display"""
    if not naics_code:
      return "Not specified"
    return str(naics_code)
  
  def check_sectoral_requirements():
    """Check for sector-specific requirements and add to applicable jurisdictions"""
    sectoral_jurisdictions = []
    
    if not defined('company.naics_code') or not company.naics_code:
      return sectoral_jurisdictions
    
    naics_code = str(company.naics_code)
    
    # HIPAA check - Healthcare sector
    if naics_code.startswith('62'):
      sectoral_jurisdictions.append('hipaa')
    
    # GLBA check - Financial Services sector  
    if naics_code.startswith('52'):
      sectoral_jurisdictions.append('glba')
    
    return sectoral_jurisdictions
  
  def is_small_business_under_tdpsa(naics_code, employee_count, annual_revenue):
    """Determine TDPSA small business exemption using NAICS data"""
    if not naics_code:
      # Use general TDPSA small business definition
      return employee_count < 100 and annual_revenue < 10000000
    
    try:
      # Find NAICS entry in loaded data
      if defined('naics_data') and naics_data:
        naics_info = None
        for item in naics_data:
          if str(item.get('id')) == str(naics_code):
            naics_info = item
            break
      
        if not naics_info:
          # Fallback to general TDPSA definition
          return employee_count < 100 and annual_revenue < 10000000
        
        # Get SBA size standards
        employee_limit = naics_info.get('employeeCountLimit')
        revenue_limit = naics_info.get('revenueLimit')
        
        # Convert revenue limit from millions to dollars
        if revenue_limit and revenue_limit < 1000:
          revenue_limit = revenue_limit * 1000000
        
        # Check SBA standards
        sba_qualifies_as_small = True
        
        if employee_limit:
          sba_qualifies_as_small = sba_qualifies_as_small and (employee_count <= employee_limit)
        
        if revenue_limit:
          sba_qualifies_as_small = sba_qualifies_as_small and (annual_revenue <= revenue_limit)
        
        # Check TDPSA general definition
        tdpsa_qualifies_as_small = employee_count < 100 and annual_revenue < 10000000
        
        # Small if meets either standard
        return sba_qualifies_as_small or tdpsa_qualifies_as_small
        
    except Exception as e:
      log(f"SBA size determination error: {e}")
      # Conservative fallback
      return employee_count < 100 and annual_revenue < 10000000
---
# Business assessment completion trigger
code: |
  if final_verification:
    business_assessment_complete = True
  else:
    business_assessment_complete = False
---