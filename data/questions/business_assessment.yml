# modules/business_assessment.yml - Business Assessment Module
---
objects:
  - company: DAObject
---
code: |
  def get_naics_choices_for_dropdown():
    """Load NAICS data and convert to dropdown choices format"""
    import json
    
    try:
      # Load from sources folder
      naics_file = path_and_mimetype('data/sources/naics.json')[0]
      
      with open(naics_file, 'r') as f:
        naics_data = json.load(f)
      
      # Process the data into choices
      choices = []
      for item in naics_data:
        if isinstance(item, dict) and 'id' in item and 'description' in item:
          naics_code = str(item['id'])
          description = str(item['description'])
          
          # Truncate long descriptions
          if len(description) > 80:
            description = description[:77] + "..."
          
          choice_text = description
          choices.append((naics_code, choice_text))
      
      # Sort by NAICS code
      choices.sort(key=lambda x: x[0])
      
      return choices if len(choices) > 0 else get_fallback_naics_choices()
      
    except Exception:
      return get_fallback_naics_choices()
  
  def get_fallback_naics_choices():
    """Fallback NAICS choices if file loading fails"""
    return [
      ('541110', 'Offices of Lawyers'),
      ('541613', 'Marketing Consulting Services'),
      ('541511', 'Custom Computer Programming Services'),
      ('541512', 'Computer Systems Design Services'),
      ('621111', 'Offices of Physicians (except Mental Health Specialists)'),
      ('621210', 'Offices of Dentists'),
      ('522110', 'Commercial Banking'),
      ('523110', 'Investment Banking and Securities Dealing'),
      ('524113', 'Direct Life Insurance Carriers'),
      ('541211', 'Offices of Certified Public Accountants'),
      ('722511', 'Full-Service Restaurants'),
      ('999999', 'Other - Please specify in additional information')
    ]
  
  def get_industry_from_naics(naics_code):
    """Determine broad industry category from NAICS code"""
    if not naics_code:
      return "Other"
    
    # Extract just the code if it's in "code: description" format
    if ':' in str(naics_code):
      naics_code = str(naics_code).split(':')[0].strip()
    
    try:
      # Load NAICS data to find industry mapping
      import json
      naics_file = path_and_mimetype('data/sources/naics.json')[0]
      with open(naics_file, 'r') as f:
        naics_data = json.load(f)
      
      # Find the NAICS entry
      for item in naics_data:
        if isinstance(item, dict) and str(item.get('id')) == str(naics_code):
          sector_desc = item.get('sectorDescription', '')
          
          # Map sector descriptions to simplified categories
          sector_mapping = {
            'Agriculture, Forestry, Fishing and Hunting': 'Agriculture',
            'Mining, Quarrying, and Oil and Gas Extraction': 'Mining',
            'Utilities': 'Utilities',
            'Construction': 'Construction',
            'Manufacturing': 'Manufacturing',
            'Wholesale Trade': 'Wholesale Trade',
            'Retail Trade': 'Retail',
            'Transportation and Warehousing': 'Transportation',
            'Information': 'Technology',
            'Finance and Insurance': 'Financial Services',
            'Real Estate and Rental and Leasing': 'Real Estate',
            'Professional, Scientific, and Technical Services': 'Professional Services',
            'Management of Companies and Enterprises': 'Management',
            'Administrative and Support and Waste Management and Remediation Services': 'Administrative Services',
            'Educational Services': 'Education',
            'Health Care and Social Assistance': 'Healthcare',
            'Arts, Entertainment, and Recreation': 'Arts & Entertainment',
            'Accommodation and Food Services': 'Food Service',
            'Other Services (except Public Administration)': 'Other Services',
            'Public Administration': 'Public Administration'
          }
          
          return sector_mapping.get(sector_desc, 'Other')
      
    except Exception:
      pass
    
    # Fallback to sector-based mapping using first 2 digits
    sector = str(naics_code)[:2] if len(str(naics_code)) >= 2 else ""
    fallback_mapping = {
      '11': 'Agriculture', '21': 'Mining', '22': 'Utilities', '23': 'Construction',
      '31': 'Manufacturing', '32': 'Manufacturing', '33': 'Manufacturing',
      '42': 'Wholesale Trade', '44': 'Retail', '45': 'Retail',
      '48': 'Transportation', '49': 'Transportation', '51': 'Technology',
      '52': 'Financial Services', '53': 'Real Estate', '54': 'Professional Services',
      '55': 'Management', '56': 'Administrative Services', '61': 'Education',
      '62': 'Healthcare', '71': 'Arts & Entertainment', '72': 'Food Service',
      '81': 'Other Services', '92': 'Public Administration'
    }
    
    return fallback_mapping.get(sector, 'Other')
  
  def is_small_business_under_tdpsa(naics_code, employee_count, annual_revenue):
    """Determine if business qualifies as small business under TDPSA using SBA size standards"""
    try:
      # Extract just the code
      if ':' in str(naics_code):
        naics_code = str(naics_code).split(':')[0].strip()
      
      # Load NAICS data to get size standards
      import json
      naics_file = path_and_mimetype('data/sources/naics.json')[0]
      with open(naics_file, 'r') as f:
        naics_data = json.load(f)
      
      # Find the NAICS entry
      naics_info = None
      for item in naics_data:
        if isinstance(item, dict) and str(item.get('id')) == str(naics_code):
          naics_info = item
          break
      
      if not naics_info:
        # TDPSA general small business exemption: < 100 employees AND < $10M revenue
        return employee_count < 100 and annual_revenue < 10000000
      
      # Get SBA size standards from the JSON
      employee_limit = naics_info.get('employeeCountLimit')
      revenue_limit = naics_info.get('revenueLimit')
      
      # Convert revenue limit from millions to actual dollars
      if revenue_limit and revenue_limit < 1000:  # Values are in millions
        revenue_limit = revenue_limit * 1000000
      
      # SBA considers you small if you're AT OR UNDER the limit
      sba_qualifies_as_small = True
      
      if employee_limit:
        sba_qualifies_as_small = sba_qualifies_as_small and (employee_count <= employee_limit)
      
      if revenue_limit:
        sba_qualifies_as_small = sba_qualifies_as_small and (annual_revenue <= revenue_limit)
      
      # For TDPSA, also apply the statutory small business definition
      tdpsa_qualifies_as_small = employee_count < 100 and annual_revenue < 10000000
      
      # Business is small if it meets EITHER SBA standards OR TDPSA general standards
      return sba_qualifies_as_small or tdpsa_qualifies_as_small
        
    except Exception:
      # Conservative fallback - use TDPSA general standards
      return employee_count < 100 and annual_revenue < 10000000
  
  def is_hipaa_applicable_by_naics(naics_code):
    """Check if NAICS code indicates HIPAA applicability"""
    if not naics_code:
      return False
    
    # Extract just the code
    if ':' in str(naics_code):
      naics_code = str(naics_code).split(':')[0].strip()
    
    try:
      # Load NAICS data to check sector
      import json
      naics_file = path_and_mimetype('data/sources/naics.json')[0]
      with open(naics_file, 'r') as f:
        naics_data = json.load(f)
      
      # Find the NAICS entry
      for item in naics_data:
        if isinstance(item, dict) and str(item.get('id')) == str(naics_code):
          sector_desc = item.get('sectorDescription', '')
          # Healthcare sector indicates potential HIPAA applicability
          return 'Health Care' in sector_desc
      
    except Exception:
      pass
    
    # Fallback to subsector check
    healthcare_subsectors = ['621', '622', '623']  # Ambulatory, Hospitals, Nursing
    naics_prefix = str(naics_code)[:3]
    return naics_prefix in healthcare_subsectors
  
  def is_glba_applicable_by_naics(naics_code):
    """Check if NAICS code indicates GLBA applicability"""  
    if not naics_code:
      return False
    
    # Extract just the code
    if ':' in str(naics_code):
      naics_code = str(naics_code).split(':')[0].strip()
    
    try:
      # Load NAICS data to check sector
      import json
      naics_file = path_and_mimetype('data/sources/naics.json')[0]
      with open(naics_file, 'r') as f:
        naics_data = json.load(f)
      
      # Find the NAICS entry
      for item in naics_data:
        if isinstance(item, dict) and str(item.get('id')) == str(naics_code):
          sector_desc = item.get('sectorDescription', '')
          # Finance and Insurance sector indicates GLBA applicability
          return 'Finance and Insurance' in sector_desc
      
    except Exception:
      pass
    
    # Fallback to subsector check
    financial_subsectors = ['521', '522', '523', '524', '525']
    naics_prefix = str(naics_code)[:3]
    return naics_prefix in financial_subsectors
---
# Business information introduction
question: "Step 1: Business Information"
subquestion: |
  Let's start by gathering some basic information about your business.
  
  This information will help us:

  * Determine which privacy laws apply to your organization
  * Assess your compliance requirements
  * Generate appropriate documentation
  
  The process will take approximately 10-15 minutes.

continue button field: show_business_information_intro
continue button label: "Begin Assessment"
---
# Step 1a: Basic business information
question: "Step 1a: Basic Business Information"
subquestion: |
  Let's start with your basic business information.
fields:
  - Company Name: company.name
    required: True
  - Number of Employees: company.employee_count
    datatype: integer
    required: True
  - Annual Revenue (USD): company.annual_revenue
    datatype: currency
    required: True
continue button field: basic_business_info_complete
continue button label: "Continue"
---
# Step 1b: Enhanced NAICS selection
question: "Step 1b: Industry Classification" 
subquestion: |
  Select your primary business activity from the NAICS codes:
  
  **Tip**: You can type to search for your industry (e.g., "legal services", "software", "retail")

fields:
  - Primary Business Activity (NAICS Code): company.naics_code
    required: True
    datatype: combobox
    choices:
      code: get_naics_choices_for_dropdown()
    help: |
      Select the NAICS code that best describes your primary business activity.

continue button field: naics_selection_complete
continue button label: "Continue"
---
# Set industry and format display values AFTER NAICS selection
code: |
  # This code block runs after NAICS selection is complete
  if defined('naics_selection_complete') and naics_selection_complete and defined('company.naics_code') and company.naics_code:
    company.industry = get_industry_from_naics(company.naics_code)
    
    # Format the display values
    naics_str = str(company.naics_code).strip()
    if ':' in naics_str:
      company_naics_display = naics_str.split(':')[0].strip()
    else:
      company_naics_display = naics_str
  else:
    company.industry = "Other"
    company_naics_display = "Not selected"
  
  # Format other display values
  if defined('company.employee_count') and company.employee_count:
    company_employee_display = "{:,}".format(int(company.employee_count))
  else:
    company_employee_display = "Not specified"
  
  if defined('company.annual_revenue') and company.annual_revenue:
    company_revenue_display = "${:,.0f}".format(float(company.annual_revenue))
  else:
    company_revenue_display = "Not specified"
---
# Step 1c: Industry confirmation and additional fields
question: "Step 1c: Business Profile Complete"
subquestion: |
  **Company**: ${ company.name }  
  **NAICS Code**: ${ company_naics_display }  
  **Industry**: ${ company.industry }  
  **Employees**: ${ company_employee_display }  
  **Annual Revenue**: ${ company_revenue_display }

fields:
  - "Is this information correct?": business_profile_confirmed
    datatype: yesnoradio
  - "Additional business description (optional)": company.description
    datatype: area
    required: False
    help: |
      Any additional information about your business activities that might affect privacy compliance requirements.

continue button field: business_profile_complete
continue button label: "Continue"
---
# Step 1d: Geographic and operational scope questions
question: "Step 1d: Geographic and Operational Scope"
subquestion: |
  Now let's determine your geographic and operational scope to identify applicable privacy laws.

fields:
  - "Does your business have a website?": business_has_website
    datatype: yesnowide
  - "Does your business have physical locations where customers visit?": business_has_physical_location
    datatype: yesnowide
  - "In which states/provinces do you have business locations?": states_with_locations
    datatype: checkboxes
    choices:
      - Alabama
      - Alaska
      - Arizona
      - Arkansas
      - California
      - Colorado
      - Connecticut
      - Delaware
      - Florida
      - Georgia
      - Hawaii
      - Idaho
      - Illinois
      - Indiana
      - Iowa
      - Kansas
      - Kentucky
      - Louisiana
      - Maine
      - Maryland
      - Massachusetts
      - Michigan
      - Minnesota
      - Mississippi
      - Missouri
      - Montana
      - Nebraska
      - Nevada
      - New Hampshire
      - New Jersey
      - New Mexico
      - New York
      - North Carolina
      - North Dakota
      - Ohio
      - Oklahoma
      - Oregon
      - Pennsylvania
      - Rhode Island
      - South Carolina
      - South Dakota
      - Tennessee
      - Texas
      - Utah
      - Vermont
      - Virginia
      - Washington
      - West Virginia
      - Wisconsin
      - Wyoming
    none of the above: False
  - "Do you serve customers or clients in the European Union?": serves_eu
    datatype: yesnowide
  - "Do you have an establishment (office, subsidiary, etc.) in the EU?": has_eu_establishment
    datatype: yesnowide
  - "Approximately how many California residents' personal information do you process annually?": california_records
    datatype: integer
    help: Include customers, employees, vendors, etc.
  - "Approximately how many Texas residents' personal information do you process annually?": texas_records
    datatype: integer
    help: Include customers, employees, vendors, etc.
  - "Do you sell personal information to third parties?": sells_personal_info
    datatype: yesnowide
    help: This includes sharing for advertising, marketing lists, or other commercial purposes
continue button field: geographic_scope_complete
continue button label: "Continue"
---
# Healthcare-specific questions (conditional)
question: Healthcare Industry Questions
subquestion: |
  Since you're in the healthcare industry, we need to assess HIPAA applicability.
fields:
  - "Are you a HIPAA covered entity (healthcare provider, health plan, or healthcare clearinghouse)?": is_hipaa_covered_entity
    datatype: yesnowide
    help: Covered entities are directly regulated by HIPAA
  - "Are you a business associate of a HIPAA covered entity?": is_hipaa_business_associate
    datatype: yesnowide
    help: Business associates provide services to covered entities and handle PHI
  - "Do you process protected health information (PHI)?": processes_phi
    datatype: yesnowide
    help: PHI includes individually identifiable health information
continue button field: healthcare_questions_complete
continue button label: "Continue"
---
# Financial services questions (conditional)
question: Financial Services Industry Questions
subquestion: |
  Since you're in the financial services industry, we need to assess GLBA applicability.
fields:
  - "Are you a financial institution as defined by GLBA?": is_glba_financial_institution
    datatype: yesnowide
    help: Banks, credit unions, securities firms, insurance companies, etc.
  - "Do you provide financial products or services to consumers?": provides_financial_products
    datatype: yesnowide
    help: Loans, investments, insurance, financial advice, etc.
  - "Do you collect nonpublic personal information from customers?": collects_npi
    datatype: yesnowide
    help: Information not publicly available, such as account numbers, income, credit history
continue button field: financial_questions_complete
continue button label: "Continue"
---
# Conditional logic for industry-specific questions
code: |
  # Healthcare questions only if healthcare industry
  if company.industry == "Healthcare":
    healthcare_questions_complete
  else:
    healthcare_questions_complete = True
    # Set default values for healthcare variables
    is_hipaa_covered_entity = False
    is_hipaa_business_associate = False
    processes_phi = False
  
  # Financial services questions only if financial industry
  if company.industry == "Financial Services":
    financial_questions_complete
  else:
    financial_questions_complete = True
    # Set default values for financial variables
    is_glba_financial_institution = False
    provides_financial_products = False
    collects_npi = False
---
# CRITICAL: Workflow dependency enforcement
code: |
  # Ensure proper sequential completion of business assessment steps
  
  # Step 1a must complete before anything else
  if not defined('basic_business_info_complete') or not basic_business_info_complete:
    need(basic_business_info_complete)
  
  # Step 1b (NAICS) must complete after Step 1a
  if basic_business_info_complete and (not defined('naics_selection_complete') or not naics_selection_complete):
    need(naics_selection_complete)
  
  # Step 1c (profile confirmation) must complete after Step 1b
  if naics_selection_complete and (not defined('business_profile_complete') or not business_profile_complete):
    need(business_profile_complete)
  
  # Step 1d (geographic scope) must complete after Step 1c
  if business_profile_complete and (not defined('geographic_scope_complete') or not geographic_scope_complete):
    need(geographic_scope_complete)
---