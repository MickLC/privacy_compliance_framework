# modules/business_assessment.yml - Business Assessment Module
---
objects:
  - company: DAObject
---
# NAICS Data Management System - Session-based caching (no file permissions needed)
code: |
  import json
  from datetime import datetime, timedelta
  
  def load_naics_data():
    """Load NAICS data using session variables for caching"""
    # Check if we already have data in this session
    if defined('naics_data_cache') and defined('naics_cache_timestamp'):
      cache_time = datetime.fromisoformat(naics_cache_timestamp)
      if datetime.now() - cache_time < timedelta(hours=4):  # Cache for 4 hours per session
        log(f"Using session-cached NAICS data ({naics_data_cache.get('record_count', 0)} codes)")
        return naics_data_cache
    
    # Download fresh data
    log("Downloading fresh NAICS data for this session...")
    fresh_data = download_naics_data_to_session()
    
    if fresh_data:
      # Store in session variables
      naics_data_cache = fresh_data
      naics_cache_timestamp = datetime.now().isoformat()
      return fresh_data
    
    # Fallback
    log("Using fallback NAICS data")
    return get_fallback_naics_data()
  
  def download_naics_data_to_session():
    """Download NAICS data for session storage only"""
    try:
      # Import requests locally to avoid pickle issues
      import requests
      
      log("Downloading fresh NAICS data from SBA...")
      
      response = requests.get(
        "https://api.sba.gov/naics/naics.json",
        timeout=45,
        headers={'User-Agent': 'Privacy-Compliance-Framework/1.0'}
      )
      
      if response.status_code == 200:
        naics_raw_data = response.json()
        
        # Process and structure the data using actual JSON format
        processed_data = {
          'timestamp': datetime.now().isoformat(),
          'source_url': 'https://api.sba.gov/naics/naics.json',
          'record_count': len(naics_raw_data),
          'naics_codes': {}
        }
        
        # Process each NAICS code using actual JSON structure
        for item in naics_raw_data:
          code = item.get('id', '').strip()
          if code and len(code) == 6:  # Valid 6-digit NAICS code
            processed_data['naics_codes'][code] = {
              'code': code,
              'description': item.get('description', '').strip(),
              'sector_id': item.get('sectorId', ''),
              'sector_description': item.get('sectorDescription', ''),
              'subsector_id': item.get('subsectorId', ''),
              'subsector_description': item.get('subsectorDescription', ''),
              # Size standards from SBA data (converted to actual dollar amounts)
              'size_standards': {
                'revenue_limit_millions': item.get('revenueLimit'),  # In millions
                'revenue_limit': item.get('revenueLimit') * 1000000 if item.get('revenueLimit') else None,  # Convert to dollars
                'asset_limit_millions': item.get('assetLimit'),
                'asset_limit': item.get('assetLimit') * 1000000 if item.get('assetLimit') else None,
                'employee_limit': item.get('employeeCountLimit')
              },
              'parent': item.get('parent'),
              'footnote': item.get('footnote')
            }
        
        log(f"Downloaded {len(processed_data['naics_codes'])} NAICS codes")
        return processed_data
        
      else:
        log(f"Failed to download NAICS data: HTTP {response.status_code}")
        return None
        
    except Exception as e:
      log(f"Error downloading NAICS data: {e}")
      return None
  
  def get_fallback_naics_data():
    """Fallback NAICS data with key industries using real structure"""
    return {
      'timestamp': datetime.now().isoformat(),
      'source': 'fallback',
      'record_count': 15,
      'naics_codes': {
        '111110': {
          'code': '111110',
          'description': 'Soybean Farming',
          'sector_id': '11',
          'sector_description': 'Agriculture, Forestry, Fishing and Hunting',
          'subsector_id': '111',
          'subsector_description': 'Crop Production',
          'size_standards': {'revenue_limit': 2250000, 'employee_limit': None, 'asset_limit': None}
        },
        '541110': {
          'code': '541110',
          'description': 'Offices of Lawyers',
          'sector_id': '54',
          'sector_description': 'Professional, Scientific, and Technical Services',
          'subsector_id': '541',
          'subsector_description': 'Professional, Scientific, and Technical Services',
          'size_standards': {'revenue_limit': None, 'employee_limit': 1500, 'asset_limit': None}
        },
        '541511': {
          'code': '541511', 
          'description': 'Custom Computer Programming Services',
          'sector_id': '54',
          'sector_description': 'Professional, Scientific, and Technical Services',
          'subsector_id': '541',
          'subsector_description': 'Professional, Scientific, and Technical Services',
          'size_standards': {'revenue_limit': None, 'employee_limit': 1500, 'asset_limit': None}
        },
        '541512': {
          'code': '541512',
          'description': 'Computer Systems Design Services',
          'sector_id': '54',
          'sector_description': 'Professional, Scientific, and Technical Services',
          'subsector_id': '541',
          'subsector_description': 'Professional, Scientific, and Technical Services',
          'size_standards': {'revenue_limit': None, 'employee_limit': 1500, 'asset_limit': None}
        },
        '621111': {
          'code': '621111',
          'description': 'Offices of Physicians (except Mental Health Specialists)',
          'sector_id': '62',
          'sector_description': 'Health Care and Social Assistance',
          'subsector_id': '621',
          'subsector_description': 'Ambulatory Health Care Services',
          'size_standards': {'revenue_limit': None, 'employee_limit': 500, 'asset_limit': None}
        },
        '621210': {
          'code': '621210',
          'description': 'Offices of Dentists',
          'sector_id': '62',
          'sector_description': 'Health Care and Social Assistance',
          'subsector_id': '621',
          'subsector_description': 'Ambulatory Health Care Services',
          'size_standards': {'revenue_limit': None, 'employee_limit': 500, 'asset_limit': None}
        },
        '522110': {
          'code': '522110',
          'description': 'Commercial Banking',
          'sector_id': '52',
          'sector_description': 'Finance and Insurance',
          'subsector_id': '522',
          'subsector_description': 'Credit Intermediation and Related Activities',
          'size_standards': {'revenue_limit': 550000000, 'employee_limit': None, 'asset_limit': None}
        },
        '523110': {
          'code': '523110',
          'description': 'Investment Banking and Securities Dealing',
          'sector_id': '52',
          'sector_description': 'Finance and Insurance',
          'subsector_id': '523',
          'subsector_description': 'Securities, Commodity Contracts, and Other Financial Investments',
          'size_standards': {'revenue_limit': None, 'employee_limit': 1500, 'asset_limit': None}
        },
        '444110': {
          'code': '444110',
          'description': 'Home Centers',
          'sector_id': '44',
          'sector_description': 'Retail Trade',
          'subsector_id': '444',
          'subsector_description': 'Building Material and Garden Equipment and Supplies Dealers',
          'size_standards': {'revenue_limit': 27500000, 'employee_limit': None, 'asset_limit': None}
        },
        '722511': {
          'code': '722511',
          'description': 'Full-Service Restaurants',
          'sector_id': '72',
          'sector_description': 'Accommodation and Food Services',
          'subsector_id': '722',
          'subsector_description': 'Food Services and Drinking Places',
          'size_standards': {'revenue_limit': 8500000, 'employee_limit': None, 'asset_limit': None}
        }
      }
    }
  
  def get_naics_choices_for_dropdown():
    """Convert NAICS data to dropdown choices format"""
    naics_data = load_naics_data()
    
    choices = []
    for code, info in naics_data['naics_codes'].items():
      description = info['description']
      # Truncate long descriptions
      if len(description) > 100:
        description = description[:97] + "..."
      
      choices.append((code, f"{code}: {description}"))
    
    # Sort by description
    choices.sort(key=lambda x: x[1])
    
    return choices
  
  def get_industry_from_naics(naics_code):
    """Determine broad industry category from NAICS code using sector info"""
    if not naics_code:
      return "Other"
    
    # Extract just the code if it's in "code: description" format
    if ':' in str(naics_code):
      naics_code = str(naics_code).split(':')[0].strip()
    
    try:
      naics_data = load_naics_data()
      
      if naics_code in naics_data['naics_codes']:
        naics_info = naics_data['naics_codes'][naics_code]
        sector_desc = naics_info.get('sector_description', '')
        
        # Map sector descriptions to simplified categories
        sector_mapping = {
          'Agriculture, Forestry, Fishing and Hunting': 'Agriculture',
          'Mining, Quarrying, and Oil and Gas Extraction': 'Mining',
          'Utilities': 'Utilities',
          'Construction': 'Construction',
          'Manufacturing': 'Manufacturing',
          'Wholesale Trade': 'Wholesale Trade',
          'Retail Trade': 'Retail',
          'Transportation and Warehousing': 'Transportation',
          'Information': 'Technology',
          'Finance and Insurance': 'Financial Services',
          'Real Estate and Rental and Leasing': 'Real Estate',
          'Professional, Scientific, and Technical Services': 'Professional Services',
          'Management of Companies and Enterprises': 'Management',
          'Administrative and Support and Waste Management and Remediation Services': 'Administrative Services',
          'Educational Services': 'Education',
          'Health Care and Social Assistance': 'Healthcare',
          'Arts, Entertainment, and Recreation': 'Arts & Entertainment',
          'Accommodation and Food Services': 'Food Service',
          'Other Services (except Public Administration)': 'Other Services',
          'Public Administration': 'Public Administration'
        }
        
        return sector_mapping.get(sector_desc, 'Other')
      
    except Exception as e:
      log(f"Error getting industry from NAICS: {e}")
    
    # Fallback to sector-based mapping
    sector = str(naics_code)[:2] if len(str(naics_code)) >= 2 else ""
    fallback_mapping = {
      '11': 'Agriculture', '21': 'Mining', '22': 'Utilities', '23': 'Construction',
      '31': 'Manufacturing', '32': 'Manufacturing', '33': 'Manufacturing',
      '42': 'Wholesale Trade', '44': 'Retail', '45': 'Retail',
      '48': 'Transportation', '49': 'Transportation', '51': 'Technology',
      '52': 'Financial Services', '53': 'Real Estate', '54': 'Professional Services',
      '55': 'Management', '56': 'Administrative Services', '61': 'Education',
      '62': 'Healthcare', '71': 'Arts & Entertainment', '72': 'Food Service',
      '81': 'Other Services', '92': 'Public Administration'
    }
    
    return fallback_mapping.get(sector, 'Other')
  
  def is_small_business_under_tdpsa(naics_code, employee_count, annual_revenue):
    """Determine if business qualifies as small business under TDPSA using SBA size standards"""
    try:
      naics_data = load_naics_data()
      
      # Extract just the code
      if ':' in str(naics_code):
        naics_code = str(naics_code).split(':')[0].strip()
      
      if naics_code not in naics_data['naics_codes']:
        log(f"NAICS code {naics_code} not found, using TDPSA general standards")
        # TDPSA general small business exemption: < 100 employees AND < $10M revenue
        return employee_count < 100 and annual_revenue < 10000000
      
      naics_info = naics_data['naics_codes'][naics_code]
      size_standards = naics_info['size_standards']
      
      # Get SBA size standards
      employee_limit = size_standards.get('employee_limit')
      revenue_limit = size_standards.get('revenue_limit') 
      asset_limit = size_standards.get('asset_limit')
      
      # SBA considers you small if you're UNDER the limit
      # We need to check if business qualifies as small under SBA standards
      sba_qualifies_as_small = True
      
      if employee_limit:
        sba_qualifies_as_small = sba_qualifies_as_small and (employee_count <= employee_limit)
      
      if revenue_limit:
        sba_qualifies_as_small = sba_qualifies_as_small and (annual_revenue <= revenue_limit)
      
      if asset_limit:
        # Asset limit would need to be provided by user - for now ignore
        pass
      
      # For TDPSA, also apply the statutory small business definition
      tdpsa_qualifies_as_small = employee_count < 100 and annual_revenue < 10000000
      
      # Business is small if it meets EITHER SBA standards OR TDPSA general standards
      is_small = sba_qualifies_as_small or tdpsa_qualifies_as_small
      
      log(f"Small business check for {naics_code}: SBA={sba_qualifies_as_small}, TDPSA={tdpsa_qualifies_as_small}, Final={is_small}")
      
      return is_small
        
    except Exception as e:
      log(f"Error checking small business status: {e}")
      # Conservative fallback - use TDPSA general standards
      return employee_count < 100 and annual_revenue < 10000000
  
  def is_hipaa_applicable_by_naics(naics_code):
    """Check if NAICS code indicates HIPAA applicability"""
    if not naics_code:
      return False
    
    # Extract just the code
    if ':' in str(naics_code):
      naics_code = str(naics_code).split(':')[0].strip()
    
    try:
      naics_data = load_naics_data()
      
      if naics_code in naics_data['naics_codes']:
        naics_info = naics_data['naics_codes'][naics_code]
        sector_desc = naics_info.get('sector_description', '')
        
        # Healthcare sector indicates potential HIPAA applicability
        return 'Health Care' in sector_desc
      
    except Exception as e:
      log(f"Error checking HIPAA applicability: {e}")
    
    # Fallback to subsector check
    healthcare_subsectors = ['621', '622', '623']  # Ambulatory, Hospitals, Nursing
    naics_prefix = str(naics_code)[:3]
    return naics_prefix in healthcare_subsectors
  
  def is_glba_applicable_by_naics(naics_code):
    """Check if NAICS code indicates GLBA applicability"""  
    if not naics_code:
      return False
    
    # Extract just the code
    if ':' in str(naics_code):
      naics_code = str(naics_code).split(':')[0].strip()
    
    try:
      naics_data = load_naics_data()
      
      if naics_code in naics_data['naics_codes']:
        naics_info = naics_data['naics_codes'][naics_code]
        sector_desc = naics_info.get('sector_description', '')
        
        # Finance and Insurance sector indicates GLBA applicability
        return 'Finance and Insurance' in sector_desc
      
    except Exception as e:
      log(f"Error checking GLBA applicability: {e}")
    
    # Fallback to subsector check
    financial_subsectors = ['521', '522', '523', '524', '525']
    naics_prefix = str(naics_code)[:3]
    return naics_prefix in financial_subsectors
  
  def filter_naics_choices(search_term, choices):
    """Filter NAICS choices based on search term"""
    if not search_term or len(search_term) < 2:
      return choices
    
    search_lower = search_term.lower()
    filtered = []
    
    for code, description in choices:
      if (search_lower in code.lower() or 
          search_lower in description.lower()):
        filtered.append((code, description))
    
    return filtered[:50]  # Limit for performance
---
# Initialize NAICS system safely
code: |
  # Load NAICS data once per session
  if not defined('naics_system_initialized'):
    log("Initializing NAICS system...")
    
    # Get choices for dropdown (this handles caching internally)
    naics_choices = get_naics_choices_for_dropdown()
    
    # Mark as initialized
    naics_system_initialized = True
    
    log(f"NAICS system initialized with {len(naics_choices)} codes")
---
# Business information introduction
question: "Step 1: Business Information"
subquestion: |
  Let's start by gathering some basic information about your business.
  
  This information will help us:
  - Determine which privacy laws apply to your organization
  - Assess your compliance requirements
  - Generate appropriate documentation
  
  The process will take approximately 10-15 minutes.

continue button field: business_profile_complete
continue button label: "Let's get started"
---
# Step 1: Basic business information
question: "Step 1a: Basic Business Information"
subquestion: |
  Let's start with your basic business information.
fields:
  - Company Name: company.name
    required: True
  - Number of Employees: company.employee_count
    datatype: integer
    required: True
  - Annual Revenue (USD): company.annual_revenue
    datatype: currency
    required: True
continue button field: basic_business_info_complete
---
# Enhanced NAICS selection with search capabilities
question: "Step 1b: Industry Classification" 
subquestion: |
  Select your primary business activity from the NAICS codes:
  
  **Tip**: You can type to search for your industry (e.g., "legal services", "software", "retail")

fields:
  - Search for your industry: naics_search_term
    required: False
    help: |
      Start typing to filter the list below. You can search by industry name or NAICS code.
  - Primary Business Activity (NAICS Code): company.naics_code
    required: True
    datatype: combobox
    choices: 
      code: |
        filter_naics_choices(naics_search_term, naics_choices) if defined('naics_search_term') and naics_search_term else naics_choices
    help: |
      Select the NAICS code that best describes your primary business activity.

continue button field: naics_selection_complete
---
# Set industry and format display values AFTER NAICS selection
code: |
  # Set industry based on NAICS selection
  if defined('naics_selection_complete') and naics_selection_complete and defined('company.naics_code') and company.naics_code:
    company.industry = get_industry_from_naics(company.naics_code)
    
    # Format the display values
    naics_str = str(company.naics_code).strip()
    if ':' in naics_str:
      company_naics_display = naics_str.split(':')[0].strip()
    else:
      company_naics_display = naics_str
  else:
    company.industry = "Other"
    company_naics_display = "Not selected"
  
  # Format other display values
  if defined('company.employee_count') and company.employee_count:
    company_employee_display = "{:,}".format(int(company.employee_count))
  else:
    company_employee_display = "Not specified"
  
  if defined('company.annual_revenue') and company.annual_revenue:
    company_revenue_display = "${:,.0f}".format(float(company.annual_revenue))
  else:
    company_revenue_display = "Not specified"
---
# Industry confirmation and additional fields
question: Business Profile Complete
subquestion: |
  **Company**: ${ company.name }  
  **NAICS Code**: ${ company_naics_display }  
  **Industry**: ${ company.industry }  
  **Employees**: ${ company_employee_display }  
  **Annual Revenue**: ${ company_revenue_display }

fields:
  - "Is this information correct?": business_profile_confirmed
    datatype: yesnoradio
  - "Additional business description (optional)": company.description
    datatype: area
    required: False
    help: |
      Any additional information about your business activities that might affect privacy compliance requirements.

continue button field: show_business_information_intro
---
# Geographic and operational scope questions
question: Geographic and Operational Scope
subquestion: |
  Now let's determine your geographic and operational scope to identify applicable privacy laws.

fields:
  - "Does your business have a website?": business_has_website
    datatype: yesnowide
  - "Does your business have physical locations where customers visit?": business_has_physical_location
    datatype: yesnowide
  - "In which states/provinces do you have business locations?": states_with_locations
    datatype: checkboxes
    choices:
      - Alabama
      - Alaska
      - Arizona
      - Arkansas
      - California
      - Colorado
      - Connecticut
      - Delaware
      - Florida
      - Georgia
      - Hawaii
      - Idaho
      - Illinois
      - Indiana
      - Iowa
      - Kansas
      - Kentucky
      - Louisiana
      - Maine
      - Maryland
      - Massachusetts
      - Michigan
      - Minnesota
      - Mississippi
      - Missouri
      - Montana
      - Nebraska
      - Nevada
      - New Hampshire
      - New Jersey
      - New Mexico
      - New York
      - North Carolina
      - North Dakota
      - Ohio
      - Oklahoma
      - Oregon
      - Pennsylvania
      - Rhode Island
      - South Carolina
      - South Dakota
      - Tennessee
      - Texas
      - Utah
      - Vermont
      - Virginia
      - Washington
      - West Virginia
      - Wisconsin
      - Wyoming
    none of the above: False
  - "Do you serve customers or clients in the European Union?": serves_eu
    datatype: yesnowide
  - "Do you have an establishment (office, subsidiary, etc.) in the EU?": has_eu_establishment
    datatype: yesnowide
  - "Approximately how many California residents' personal information do you process annually?": california_records
    datatype: integer
    help: Include customers, employees, vendors, etc.
  - "Approximately how many Texas residents' personal information do you process annually?": texas_records
    datatype: integer
    help: Include customers, employees, vendors, etc.
  - "Do you sell personal information to third parties?": sells_personal_info
    datatype: yesnowide
    help: This includes sharing for advertising, marketing lists, or other commercial purposes
continue button field: geographic_scope_complete
---
# Healthcare-specific questions (conditional)
question: Healthcare Industry Questions
subquestion: |
  Since you're in the healthcare industry, we need to assess HIPAA applicability.
fields:
  - "Are you a HIPAA covered entity (healthcare provider, health plan, or healthcare clearinghouse)?": is_hipaa_covered_entity
    datatype: yesnowide
    help: Covered entities are directly regulated by HIPAA
  - "Are you a business associate of a HIPAA covered entity?": is_hipaa_business_associate
    datatype: yesnowide
    help: Business associates provide services to covered entities and handle PHI
  - "Do you process protected health information (PHI)?": processes_phi
    datatype: yesnowide
    help: PHI includes individually identifiable health information
continue button field: healthcare_questions_complete
---
# Financial services questions (conditional)
question: Financial Services Industry Questions
subquestion: |
  Since you're in the financial services industry, we need to assess GLBA applicability.
fields:
  - "Are you a financial institution as defined by GLBA?": is_glba_financial_institution
    datatype: yesnowide
    help: Banks, credit unions, securities firms, insurance companies, etc.
  - "Do you provide financial products or services to consumers?": provides_financial_products
    datatype: yesnowide
    help: Loans, investments, insurance, financial advice, etc.
  - "Do you collect nonpublic personal information from customers?": collects_npi
    datatype: yesnowide
    help: Information not publicly available, such as account numbers, income, credit history
continue button field: financial_questions_complete
---
# Conditional logic for industry-specific questions
code: |
  # Healthcare questions only if healthcare industry
  if company.industry == "Healthcare":
    healthcare_questions_complete
  else:
    healthcare_questions_complete = True
    # Set default values for healthcare variables
    is_hipaa_covered_entity = False
    is_hipaa_business_associate = False
    processes_phi = False
  
  # Financial services questions only if financial industry
  if company.industry == "Financial Services":
    financial_questions_complete
  else:
    financial_questions_complete = True
    # Set default values for financial variables
    is_glba_financial_institution = False
    provides_financial_products = False
    collects_npi = False
---