---
# Business Assessment Module - Memory-Efficient with Validation Loops
---
question: |
  Privacy Compliance Assessment
subquestion: |
  This assessment will determine which privacy laws apply to your business and generate appropriate documentation.
  
  **What we'll assess:**
  * Business profile and industry classification
  * Geographic scope and data processing activities
  * Applicable privacy law requirements
  * Required documentation and compliance gaps
  
  **Time required:** Approximately 10-15 minutes
  
  **Important:** This tool provides informational guidance only and does not constitute legal advice.

continue button field: show_intro
continue button label: "Begin Assessment"
---
# Step 1: Basic Business Information
question: |
  Step 1: Business Information
fields:
  - Company Name: company.name
    required: True
    help: Legal name of your business entity
  - Number of Employees: company.employee_count
    datatype: integer
    required: True
    min: 0
    help: Total number of employees (full-time, part-time, contractors)
  - Annual Revenue (USD): company.annual_revenue
    datatype: currency
    required: True
    min: 0
    help: Gross annual revenue for most recent complete fiscal year
continue button field: basic_info_entered
continue button label: "Continue"
---
# Step 2: Industry Classification
question: |
  Step 2: Industry Classification
subquestion: |
  Select your primary business activity. This determines industry-specific privacy requirements.
fields:
  - Primary Business Activity (NAICS Code): company.naics_code
    required: True
    datatype: combobox
    choices:
      code: get_naics_choices()
    help: |
      Search by typing keywords (e.g., "legal services", "software", "retail")
continue button field: naics_selected
continue button label: "Continue"
---
# Step 3: Verification and Correction
question: |
  Step 3: Verify Business Profile
subquestion: |
  Please verify this information is correct:
  
  **Company**: ${ company.name }  
  **Industry**: ${ get_industry_category(company.naics_code) }  
  **NAICS Code**: ${ format_naics_display(company.naics_code) }  
  **Employees**: ${ "{:,}".format(int(company.employee_count)) }  
  **Annual Revenue**: ${ "${:,.0f}".format(float(company.annual_revenue)) }
  
  % if has_sectoral_requirements(company.naics_code):
  **Note**: Your industry classification indicates potential sector-specific privacy requirements.
  % endif

fields:
  - "Is this information correct?": business_info_verified
    datatype: yesnoradio
    required: True
under: |
  If any information is incorrect, select "No" to make corrections.
continue button field: verification_complete
continue button label: "Continue"
---
# Correction loop for basic info
question: |
  Correct Basic Business Information
subquestion: |
  Please update any incorrect information:
fields:
  - Company Name: company.name
    required: True
  - Number of Employees: company.employee_count
    datatype: integer
    required: True
    min: 0
  - Annual Revenue (USD): company.annual_revenue
    datatype: currency
    required: True
    min: 0
continue button field: basic_info_corrected
continue button label: "Update Information"
---
# Correction loop for NAICS
question: |
  Correct Industry Classification
subquestion: |
  Please select the correct primary business activity:
fields:
  - Primary Business Activity (NAICS Code): company.naics_code
    required: True
    datatype: combobox
    choices:
      code: get_naics_choices()
continue button field: naics_corrected
continue button label: "Update Industry"
---
# Step 4: Geographic and Operational Scope
question: |
  Step 4: Geographic and Operational Scope
fields:
  - "Does your business have a website?": business_has_website
    datatype: yesnowide
  - "Does your business have physical locations where customers visit?": business_has_physical_location
    datatype: yesnowide
  - "In which states/regions do you have business operations?": states_with_operations
    datatype: checkboxes
    choices:
      - California
      - Texas
      - New York
      - Virginia
      - Florida
      - Illinois
      - Other US states
    required: False
  - "Do you serve customers or clients in the European Union?": serves_eu
    datatype: yesnowide
  - "Do you have an establishment (office, subsidiary, etc.) in the EU?": has_eu_establishment
    datatype: yesnowide
continue button field: geographic_scope_entered
continue button label: "Continue"
---
# Step 5: Data Processing Volume
question: |
  Step 5: Data Processing Volume
subquestion: |
  Provide approximate annual numbers for personal data processing:
fields:
  - "California residents' data processed annually": california_records
    datatype: integer
    default: 0
    help: Include customers, employees, vendors, website visitors, etc.
  - "Texas residents' data processed annually": texas_records
    datatype: integer
    default: 0
    help: Include customers, employees, vendors, website visitors, etc.
  - "EU data subjects processed annually": eu_data_subjects
    datatype: integer
    default: 0
    help: Include any EU residents whose data you process
  - "Do you sell personal information to third parties?": sells_personal_info
    datatype: yesnowide
    help: This includes sharing for advertising, marketing lists, or other commercial purposes
continue button field: data_volume_entered
continue button label: "Continue"
---
# Final verification with edit options
question: |
  Step 6: Final Verification
subquestion: |
  Please review your complete business profile:
  
  ## Business Information
  * **Company**: ${ company.name }
  * **Industry**: ${ get_industry_category(company.naics_code) }
  * **NAICS Code**: ${ format_naics_display(company.naics_code) }
  * **Employees**: ${ "{:,}".format(int(company.employee_count)) }
  * **Annual Revenue**: ${ "${:,.0f}".format(float(company.annual_revenue)) }
  
  ## Operations
  * **Website**: ${ "Yes" if business_has_website else "No" }
  * **Physical Locations**: ${ "Yes" if business_has_physical_location else "No" }
  * **Geographic Operations**: ${ format_geographic_scope() }
  * **EU Operations**: ${ "Yes" if (serves_eu or has_eu_establishment) else "No" }
  
  ## Data Processing
  * **California Records**: ${ "{:,}".format(int(california_records)) }
  * **Texas Records**: ${ "{:,}".format(int(texas_records)) }
  * **EU Data Subjects**: ${ "{:,}".format(int(eu_data_subjects)) }
  * **Sells Personal Info**: ${ "Yes" if sells_personal_info else "No" }

fields:
  - "Is all information correct?": final_verification
    datatype: yesnoradio
    required: True
  - "What would you like to edit?": edit_section
    datatype: radio
    choices:
      - "Basic business information"
      - "Industry classification"
      - "Geographic scope"
      - "Data processing volume"
    show if:
      variable: final_verification
      is: False
    required: True
continue button field: business_assessment_reviewed
continue button label: "Continue to Analysis"
---
# Workflow control with validation loops
code: |
  # Business assessment workflow with correction loops
  show_intro
  
  # Initial data collection
  basic_info_entered
  naics_selected
  
  # Verification loop
  verification_complete
  
  while not business_info_verified:
    # Determine what needs correction
    if company.naics_code not in [choice[0] for choice in get_naics_choices()]:
      naics_corrected
    else:
      basic_info_corrected
    
    # Re-verify
    verification_complete
  
  # Continue with geographic and data scope
  geographic_scope_entered
  data_volume_entered
  
  # Final verification with edit options
  business_assessment_reviewed
  
  while not final_verification:
    if edit_section == "Basic business information":
      basic_info_corrected
    elif edit_section == "Industry classification":
      naics_corrected
    elif edit_section == "Geographic scope":
      geographic_scope_entered
    elif edit_section == "Data processing volume":
      data_volume_entered
    
    # Re-verify after edits
    business_assessment_reviewed
  
  business_assessment_complete = True
---
# Memory-efficient NAICS functions
code: |
  def get_naics_choices():
    """Load NAICS choices efficiently - cache locally if possible"""
    try:
      # Try to load from local cache first
      naics_file = path_and_mimetype('data/sources/naics.json')[0]
      with open(naics_file, 'r', encoding='utf-8') as f:
        naics_data = json.load(f)
      
      # Convert to choices format - limit to reasonable size
      choices = []
      for item in naics_data[:1000]:  # Limit to prevent memory issues
        if isinstance(item, dict) and 'id' in item and 'description' in item:
          naics_code = str(item['id'])
          description = str(item['description'])
          
          # Truncate long descriptions
          if len(description) > 60:
            description = description[:57] + "..."
          
          choices.append((naics_code, description))
      
      return sorted(choices, key=lambda x: x[1])  # Sort by description
      
    except Exception as e:
      log(f"NAICS loading error: {e}")
      # Fallback to essential choices
      return [
        ('541110', 'Offices of Lawyers'),
        ('541613', 'Marketing Consulting Services'),
        ('541511', 'Custom Computer Programming Services'),
        ('541512', 'Computer Systems Design Services'),
        ('621111', 'Offices of Physicians'),
        ('621210', 'Offices of Dentists'),
        ('522110', 'Commercial Banking'),
        ('523110', 'Investment Banking and Securities'),
        ('524113', 'Direct Life Insurance Carriers'),
        ('541211', 'Offices of Certified Public Accountants'),
        ('722511', 'Full-Service Restaurants'),
        ('999999', 'Other - Please specify in additional information')
      ]
  
  def get_industry_category(naics_code):
    """Get broad industry category from NAICS code"""
    if not naics_code:
      return "Other"
    
    # Load fresh NAICS data to get industry category
    try:
      naics_file = path_and_mimetype('data/sources/naics.json')[0]
      with open(naics_file, 'r', encoding='utf-8') as f:
        naics_data = json.load(f)
      
      # Find specific NAICS entry
      naics_info = next((item for item in naics_data if str(item.get('id')) == str(naics_code)), None)
      if naics_info:
        sector_desc = naics_info.get('sectorDescription', '')
        
        # Map to simplified categories
        sector_mapping = {
          'Agriculture, Forestry, Fishing and Hunting': 'Agriculture',
          'Mining, Quarrying, and Oil and Gas Extraction': 'Mining',
          'Utilities': 'Utilities',
          'Construction': 'Construction',
          'Manufacturing': 'Manufacturing',
          'Wholesale Trade': 'Wholesale Trade',
          'Retail Trade': 'Retail',
          'Transportation and Warehousing': 'Transportation',
          'Information': 'Technology',
          'Finance and Insurance': 'Financial Services',
          'Real Estate and Rental and Leasing': 'Real Estate',
          'Professional, Scientific, and Technical Services': 'Professional Services',
          'Management of Companies and Enterprises': 'Management',
          'Administrative and Support and Waste Management and Remediation Services': 'Administrative Services',
          'Educational Services': 'Education',
          'Health Care and Social Assistance': 'Healthcare',
          'Arts, Entertainment, and Recreation': 'Arts & Entertainment',
          'Accommodation and Food Services': 'Food Service',
          'Other Services (except Public Administration)': 'Other Services',
          'Public Administration': 'Public Administration'
        }
        
        return sector_mapping.get(sector_desc, 'Other')
    
    except Exception as e:
      log(f"Industry category error: {e}")
    
    # Fallback based on NAICS prefix
    sector = str(naics_code)[:2] if len(str(naics_code)) >= 2 else ""
    fallback_mapping = {
      '11': 'Agriculture', '21': 'Mining', '22': 'Utilities', '23': 'Construction',
      '31': 'Manufacturing', '32': 'Manufacturing', '33': 'Manufacturing',
      '42': 'Wholesale Trade', '44': 'Retail', '45': 'Retail',
      '48': 'Transportation', '49': 'Transportation', '51': 'Technology',
      '52': 'Financial Services', '53': 'Real Estate', '54': 'Professional Services',
      '55': 'Management', '56': 'Administrative Services', '61': 'Education',
      '62': 'Healthcare', '71': 'Arts & Entertainment', '72': 'Food Service',
      '81': 'Other Services', '92': 'Public Administration'
    }
    
    return fallback_mapping.get(sector, 'Other')
  
  def has_sectoral_requirements(naics_code):
    """Check if NAICS code indicates sector-specific requirements"""
    if not naics_code:
      return False
    
    # Healthcare (potential HIPAA)
    if str(naics_code).startswith('62'):
      return True
    
    # Financial Services (potential GLBA)
    if str(naics_code).startswith('52'):
      return True
    
    return False
  
  def format_naics_display(naics_code):
    """Format NAICS code for display"""
    if not naics_code:
      return "Not specified"
    return str(naics_code)
  
  def format_geographic_scope():
    """Format geographic scope for display"""
    if not defined('states_with_operations'):
      return "Not specified"
    
    selected_states = [state for state in states_with_operations.true_values()]
    if not selected_states:
      return "None specified"
    
    if len(selected_states) == 1:
      return selected_states[0]
    elif len(selected_states) <= 3:
      return ", ".join(selected_states)
    else:
      return f"{len(selected_states)} states/regions"
---