# modules/document_builder.yml - Document Builder Module
---
# Document builder module - generates privacy documentation
---
objects from file:
  - gdpr_requirements: gdpr_requirements.json
  - ccpa_requirements: ccpa_requirements.json
  - tdpsa_requirements: tdpsa_requirements.json
---
question: |
  Step 5: Document Generation
subquestion: |
  Finally, we'll generate your privacy documentation package.
  
  Please select which documents you'd like to generate:
fields:
  - Generate Internal Privacy Policy: generate_internal_policy
    input type: checkbox
    default: True
  - Generate Public-Facing Privacy Statement: generate_public_documents
    input type: checkbox
    default: ${ business_has_website }
  - Generate Physical Privacy Notice: generate_physical_notice
    input type: checkbox
    default: ${ business_has_physical_location }
  - Generate Gap Analysis Report: generate_gap_report
    input type: checkbox
    default: True
  - Generate Remediation Plan: generate_remediation_plan
    input type: checkbox
    default: True

continue button field: show_document_generation_intro
---
code: |
  def generate_internal_policy_document():
    """Generate internal privacy policy document using imported requirements"""
    global internal_policy
    
    # Build context for template using imported data
    context = {
      "company_name": company.name,
      "effective_date": today().strftime("%B %d, %Y"),
      "applicable_laws": format_applicable_laws(),
      "data_collection_practices": format_data_collection(),
      "data_use_practices": format_data_use(),
      "data_sharing_practices": format_data_sharing(),
      "individual_rights": format_individual_rights(),
      "security_measures": format_security_measures(),
      "breach_response": format_breach_response(),
      "training_compliance": format_training_compliance(),
      "policy_governance": format_policy_governance()
    }
    
    # Use template - avoiding multi-line strings in YAML code blocks
    template_parts = [
      "# Internal Privacy Policy for {company_name}",
      "",
      "## Effective Date: {effective_date}",
      "",
      "## 1. Introduction",
      "",
      "This Internal Privacy Policy documents the privacy practices of {company_name}. It is intended for internal use to guide employees and contractors in handling personal information in compliance with applicable privacy laws.",
      "",
      "## 2. Applicable Privacy Laws",
      "",
      "This policy addresses requirements from the following privacy laws applicable to our organization:",
      "",
      "{applicable_laws}",
      "",
      "## 3. Data Collection Practices",
      "",
      "{data_collection_practices}",
      "",
      "## 4. Data Use and Processing",
      "",
      "{data_use_practices}",
      "",
      "## 5. Data Sharing and Third Parties",
      "",
      "{data_sharing_practices}",
      "",
      "## 6. Individual Rights",
      "",
      "{individual_rights}",
      "",
      "## 7. Security Measures",
      "",
      "{security_measures}",
      "",
      "## 8. Breach Response",
      "",
      "{breach_response}",
      "",
      "## 9. Training and Compliance",
      "",
      "{training_compliance}",
      "",
      "## 10. Policy Governance",
      "",
      "{policy_governance}"
    ]
    
    template = "\n".join(template_parts)
    
    # Format the template with context
    internal_policy = template.format(**context)
    
    # Make it available for download
    internal_policy_download_link = pdf_concatenate(internal_policy, filename="internal_privacy_policy.pdf")
    
    return internal_policy
---
code: |
  def format_applicable_laws():
    """Format the list of applicable laws for the template using imported data"""
    laws_text = ""
    for jurisdiction_id in applicable_jurisdictions:
      law_name = next((j["name"] for j in jurisdiction_registry["jurisdictions"] if j["id"] == jurisdiction_id), jurisdiction_id)
      laws_text += f"* {law_name}\n"
    return laws_text
  
  def format_data_collection():
    """Format the data collection section using requirements data"""
    content_parts = [
      "This section details the types of personal data we collect and how we collect it.",
      "",
      "### Categories of Personal Data",
      "* Personal identifiers (e.g., name, address, email, phone number)",
      "* Commercial information (e.g., products or services purchased)",
      "* Internet activity information (e.g., browsing history, search history)",
      "* Geolocation data",
      "* Professional or employment-related information",
      "* Education information",
      "",
      "### Collection Methods",
      "* Direct collection from individuals",
      "* Automatic collection through website technologies",  
      "* Collection from third-party sources",
      "",
      "### Notice and Consent",
      "All personal data collection must be accompanied by appropriate notice. Consent should be obtained when required by applicable law."
    ]
    return "\n".join(content_parts)
  
  def format_data_use():
    """Format the data use section"""
    content_parts = [
      "This section describes how collected personal data may be used.",
      "",
      "### Permitted Uses",
      "Personal data may only be used for the purposes disclosed at the time of collection or subsequently authorized by the individual. Common purposes include:",
      "",
      "* Providing requested products or services",
      "* Processing transactions",
      "* Marketing and advertising (subject to opt-out requirements)",
      "* Account management",
      "* Analytics and improvement of products/services",
      "* Legal compliance",
      "",
      "### Limitations on Use",
      "* Personal data should only be used for legitimate business purposes",
      "* Use of personal data should be limited to what is necessary to accomplish the stated purpose",
      "* Secondary uses should be compatible with original purposes or separately authorized"
    ]
    return "\n".join(content_parts)
  
  def format_data_sharing():
    """Format the data sharing section"""
    content_parts = [
      "This section details our practices for sharing personal data with third parties.",
      "",
      "### Categories of Recipients",
      "* Service providers",
      "* Business partners", 
      "* Affiliated companies",
      "* Legal authorities (when required by law)",
      "",
      "### Requirements for Sharing",
      "* Due diligence on recipients",
      "* Appropriate contractual protections (Data Processing Agreements or similar)",
      "* Limitation to necessary data",
      "* Secure transfer methods",
      "",
      "### International Transfers",
      "When transferring personal data across international borders, appropriate safeguards must be in place, which may include:",
      "* Standard Contractual Clauses",
      "* Binding Corporate Rules",
      "* Adequacy decisions",
      "* Explicit consent (when appropriate)"
    ]
    return "\n".join(content_parts)
---
code: |
  def format_individual_rights():
    """Format the individual rights section using imported requirements"""
    rights_text = "Our organization respects individual rights regarding personal data. The following rights must be honored according to applicable laws:\n\n"
    
    # Add GDPR-specific rights if applicable
    if "gdpr" in applicable_jurisdictions:
      rights_text += "### GDPR Rights\n"
      gdpr_rights_reqs = [req for req in gdpr_requirements["requirements"] if req["category"] == "individual_rights"]
      for req in gdpr_rights_reqs:
        rights_text += f"* **{req['description']}**: {req.get('details', 'Required by GDPR')}\n"
      rights_text += "\n"
    
    # Add CCPA-specific rights if applicable
    if "ccpa" in applicable_jurisdictions:
      rights_text += "### CCPA Rights\n"
      ccpa_rights_reqs = [req for req in ccpa_requirements["requirements"] if req["category"] == "consumer_rights"]
      for req in ccpa_rights_reqs:
        rights_text += f"* **{req['description']}**: {req.get('details', 'Required by CCPA')}\n"
      rights_text += "\n"
    
    # Add TDPSA-specific rights if applicable
    if "tdpsa" in applicable_jurisdictions:
      rights_text += "### TDPSA Rights\n"
      tdpsa_rights_reqs = [req for req in tdpsa_requirements["requirements"] if req["category"] == "consumer_rights"]
      for req in tdpsa_rights_reqs:
        rights_text += f"* **{req['description']}**: {req.get('details', 'Required by TDPSA')}\n"
      rights_text += "\n"
    
    rights_text += "### Request Handling\n"
    rights_text += "* All requests should be acknowledged promptly\n"
    rights_text += "* Verification of the requester's identity is required before processing\n"
    rights_text += "* Responses must be provided within statutory timeframes\n"
    rights_text += "* Records of all requests and responses must be maintained\n"
    
    return rights_text
  
  def format_security_measures():
    """Format the security measures section using imported requirements"""
    content_parts = [
      "This section outlines the security measures that must be implemented to protect personal data.",
      "",
      "### Administrative Safeguards",
      "* Regular risk assessments",
      "* Development and implementation of security policies and procedures",
      "* Employee training on data protection",
      "* Access authorization controls",
      "* Vendor management",
      "",
      "### Technical Safeguards",
      "* Access controls (authentication and authorization)",
      "* Encryption of personal data in transit and at rest",
      "* Firewalls and intrusion detection systems",
      "* Secure software development practices",
      "* Regular security updates and patches",
      "* Logging and monitoring",
      "",
      "### Physical Safeguards",
      "* Physical access controls to facilities",
      "* Secure storage of physical media",
      "* Proper disposal procedures for physical media",
      "* Protection against environmental hazards",
      "",
      "### Monitoring and Testing",
      "* Regular security testing (vulnerability scanning, penetration testing)",
      "* Continuous monitoring for unauthorized access",
      "* Regular review of access logs",
      "* Periodic evaluation of security controls"
    ]
    return "\n".join(content_parts)
  
  def format_breach_response():
    """Format the breach response section using imported requirements"""
    content_parts = [
      "This section outlines procedures for responding to suspected or confirmed data breaches.",
      "",
      "### Breach Response Team",
      "* Composition: Legal, IT, Security, Communications, and Executive Leadership",
      "* Roles and responsibilities",
      "* Contact information",
      "",
      "### Breach Response Procedure",
      "1. **Detection and Reporting**: All suspected breaches must be reported immediately to the Breach Response Team",
      "2. **Containment**: Take immediate action to contain the breach and prevent further data loss",
      "3. **Assessment**: Determine the nature, scope, and impact of the breach",
      "4. **Notification**: Notify affected individuals, regulators, and other stakeholders as required by law",
      "5. **Investigation**: Conduct a thorough investigation of the breach",
      "6. **Remediation**: Implement measures to address the cause of the breach",
      "7. **Documentation**: Maintain comprehensive records of the breach and response",
      "",
      "### Notification Requirements"
    ]
    
    breach_text = "\n".join(content_parts)
    
    # Add jurisdiction-specific notification requirements
    if "gdpr" in applicable_jurisdictions:
      breach_text += "\n* **GDPR**: 72 hours to supervisory authority, without undue delay to individuals if high risk"
    if "ccpa" in applicable_jurisdictions:
      breach_text += "\n* **CCPA**: Follow California breach notification law (Civ. Code § 1798.82)"
    if "tdpsa" in applicable_jurisdictions:
      breach_text += "\n* **TDPSA**: Follow Texas breach notification requirements (Bus. & Com. Code § 521.053)"
    
    return breach_text
  
  def format_training_compliance():
    """Format the training and compliance section"""
    content_parts = [
      "This section outlines requirements for privacy training and compliance monitoring.",
      "",
      "### Training Requirements",
      "* Initial privacy training for all new employees",
      "* Annual refresher training for all employees",
      "* Role-specific training for employees with access to sensitive personal data",
      "* Documentation of training completion",
      "",
      "### Compliance Monitoring",
      "* Regular internal audits",
      "* Periodic risk assessments",
      "* Compliance reviews of new projects or systems",
      "* Documentation of compliance activities",
      "",
      "### Enforcement",
      "* Responsibility for enforcement",
      "* Consequences for non-compliance",
      "* Reporting mechanisms for potential violations"
    ]
    return "\n".join(content_parts)
  
  def format_policy_governance():
    """Format the policy governance section"""
    content_parts = [
      "This section outlines how this policy is managed and updated.",
      "",
      "### Policy Ownership",
      "* The Chief Privacy Officer (or equivalent) is responsible for maintaining this policy",
      "* Department managers are responsible for implementing this policy within their areas",
      "",
      "### Policy Review",
      "* This policy will be reviewed annually",
      "* Updates will be made as needed to address:",
      "  * Changes in applicable laws or regulations",
      "  * Changes in business operations",
      "  * Identified deficiencies or improvements",
      "",
      "### Documentation Requirements",
      "* All versions of this policy must be archived",
      "* Changes must be documented with version control",
      "* Distribution of updates must be tracked"
    ]
    return "\n".join(content_parts)
---
code: |
  def generate_public_facing_documents():
    """Generate public-facing privacy documents"""
    global public_documents, website_privacy_notice_download_link, physical_notice_download_link
    public_documents = {}
    
    # Generate website privacy statement
    if business_has_website:
      public_documents["privacy_statement"] = generate_privacy_statement()
      website_privacy_notice_download_link = pdf_concatenate(public_documents["privacy_statement"], filename="website_privacy_notice.pdf")
    
    # Generate physical privacy notice
    if business_has_physical_location and generate_physical_notice:
      public_documents["physical_notice"] = generate_physical_notice()
      physical_notice_download_link = pdf_concatenate(public_documents["physical_notice"], filename="physical_privacy_notice.pdf")
    
    return public_documents
  
  def generate_privacy_statement():
    """Generate website privacy statement using imported requirements"""
    global privacy_statement
    
    template_parts = [
      "# Privacy Statement for {company_name}",
      "",
      "**Effective Date**: {effective_date}",
      "",
      "## 1. Introduction",
      "",
      "{company_name} (\"we,\" \"our,\" or \"us\") respects your privacy and is committed to protecting it through our compliance with this privacy statement.",
      "",
      "This privacy statement describes the types of information we may collect from you or that you may provide when you visit our website and our practices for collecting, using, maintaining, protecting, and disclosing that information.",
      "",
      "## 2. Information We Collect",
      "",
      "{information_collected}",
      "",
      "## 3. How We Use Your Information",
      "",
      "{information_use}",
      "",
      "## 4. Information Sharing and Disclosure",
      "",
      "{information_sharing}",
      "",
      "## 5. Your Privacy Rights",
      "",
      "{privacy_rights}",
      "",
      "## 6. Data Security",
      "",
      "{data_security}",
      "",
      "## 7. Changes to Our Privacy Statement",
      "",
      "{privacy_policy_changes}",
      "",
      "## 8. Contact Information",
      "",
      "{contact_information}"
    ]
    
    template = "\n".join(template_parts)
    
    # Build context for template
    context = {
      "company_name": company.name,
      "effective_date": today().strftime("%B %d, %Y"),
      "information_collected": format_public_information_collected(),
      "information_use": format_public_information_use(),
      "information_sharing": format_public_information_sharing(),
      "privacy_rights": format_public_privacy_rights(),
      "data_security": format_public_data_security(),
      "privacy_policy_changes": format_public_policy_changes(),
      "contact_information": format_public_contact_information()
    }
    
    # Format the template with context
    privacy_statement = template.format(**context)
    
    return privacy_statement
---
code: |
  def format_public_information_collected():
    """Format the information collected section for public notice"""
    content_parts = [
      "We may collect several types of information from and about users of our website, including:",
      "",
      "* Personal identifiers, such as name, postal address, email address, telephone number, or any other identifier by which you may be contacted online or offline.",
      "* Internet activity information, such as your IP address, browser type, operating system, referring URLs, access times, and pages viewed.",
      "* Geolocation data that may be collected when you use our website.",
      "",
      "We collect this information:",
      "* Directly from you when you provide it to us.",
      "* Automatically as you navigate through the site, using cookies and other tracking technologies.",
      "* From third parties, such as business partners and analytics providers."
    ]
    return "\n".join(content_parts)
  
  def format_public_information_use():
    """Format the information use section for public notice"""
    content_parts = [
      "We use information that we collect about you or that you provide to us:",
      "",
      "* To present our website and its contents to you.",
      "* To provide you with information, products, or services that you request from us.",
      "* To fulfill any other purpose for which you provide it.",
      "* To carry out our obligations and enforce our rights.",
      "* To improve our website and customer service.",
      "* In any other way we may describe when you provide the information.",
      "* For any other purpose with your consent."
    ]
    return "\n".join(content_parts)
  
  def format_public_information_sharing():
    """Format the information sharing section for public notice"""
    content_parts = [
      "We may disclose personal information that we collect or you provide:",
      "",
      "* To our subsidiaries and affiliates.",
      "* To contractors, service providers, and other third parties we use to support our business.",
      "* To a buyer or other successor in the event of a merger, divestiture, restructuring, reorganization, dissolution, or other sale or transfer of some or all of our assets.",
      "* To fulfill the purpose for which you provide it.",
      "* For any other purpose disclosed by us when you provide the information.",
      "* With your consent.",
      "* To comply with any court order, law, or legal process.",
      "* To enforce our rights arising from any contracts.",
      "* If we believe disclosure is necessary to protect the rights, property, or safety of our company, our customers, or others."
    ]
    return "\n".join(content_parts)
---
code: |
  def format_public_privacy_rights():
    """Format the privacy rights section for public notice using imported requirements"""
    rights_text = ""
    
    if "ccpa" in applicable_jurisdictions:
      ccpa_parts = [
        "### California Privacy Rights",
        "",
        "If you are a California resident, California law may provide you with additional rights regarding our use of your personal information.",
        "",
        "**Your Rights under the CCPA**"
      ]
      rights_text += "\n".join(ccpa_parts) + "\n"
      
      # Use imported CCPA requirements for rights descriptions
      ccpa_rights_reqs = [req for req in ccpa_requirements["requirements"] if req["category"] == "consumer_rights"]
      for req in ccpa_rights_reqs:
        rights_text += f"* **{req['description']}**: You have the right as described in the CCPA.\n"
      
      exercising_parts = [
        "",
        "**Exercising Your Rights**",
        "To exercise the rights described above, please submit a verifiable consumer request to us by [contact method].",
        ""
      ]
      rights_text += "\n".join(exercising_parts) + "\n"
    
    if "tdpsa" in applicable_jurisdictions:
      tdpsa_parts = [
        "### Texas Privacy Rights",
        "",
        "If you are a Texas resident, the Texas Data Privacy and Security Act (TDPSA) provides you with specific rights regarding your personal data.",
        "",
        "**Your Rights under the TDPSA**"
      ]
      rights_text += "\n".join(tdpsa_parts) + "\n"
      
      # Use imported TDPSA requirements for rights descriptions
      tdpsa_rights_reqs = [req for req in tdpsa_requirements["requirements"] if req["category"] == "consumer_rights"]
      for req in tdpsa_rights_reqs:
        rights_text += f"* **{req['description']}**: You have the right as described in the TDPSA.\n"
      
      exercising_parts = [
        "",
        "**Exercising Your Rights**",
        "To exercise the rights described above, please submit a request to us by [contact method].",
        ""
      ]
      rights_text += "\n".join(exercising_parts) + "\n"
    
    if "gdpr" in applicable_jurisdictions:
      gdpr_parts = [
        "### European Privacy Rights",
        "",
        "If you are located in the European Economic Area (EEA), you have certain rights under the General Data Protection Regulation (GDPR).",
        "",
        "**Your Rights under the GDPR**"
      ]
      rights_text += "\n".join(gdpr_parts) + "\n"
      
      # Use imported GDPR requirements for rights descriptions
      gdpr_rights_reqs = [req for req in gdpr_requirements["requirements"] if req["category"] == "individual_rights"]
      for req in gdpr_rights_reqs:
        rights_text += f"* **{req['description']}**: You have the right as described in the GDPR.\n"
      
      exercising_parts = [
        "",
        "**Exercising Your Rights**",
        "To exercise the rights described above, please submit a request to us by [contact method].",
        ""
      ]
      rights_text += "\n".join(exercising_parts) + "\n"
    
    if not rights_text:
      default_parts = [
        "We respect your privacy rights and provide you with reasonable access to the personal data that you may have provided through your use of our services.",
        "",
        "If you wish to access or amend any personal data we hold about you, or to request that we delete any information about you, you may contact us as set forth in the \"Contact Information\" section.",
        "",
        "At your request, we will have any reference to you deleted or blocked in our database.",
        ""
      ]
      rights_text = "\n".join(default_parts) + "\n"
    
    # Add Do Not Track section
    dnt_parts = [
      "### Do Not Track Signals",
      "",
      "Some browsers have a \"Do Not Track\" feature that lets you tell websites that you do not want to have your online activities tracked. We currently do not respond to \"Do Not Track\" signals."
    ]
    rights_text += "\n".join(dnt_parts)
    
    return rights_text
  
  def format_public_data_security():
    """Format the data security section for public notice"""
    content_parts = [
      "We have implemented measures designed to secure your personal information from accidental loss and from unauthorized access, use, alteration, and disclosure. All information you provide to us is stored on secure servers behind firewalls.",
      "",
      "The safety and security of your information also depends on you. Where we have given you (or where you have chosen) a password for access to certain parts of our website, you are responsible for keeping this password confidential. We ask you not to share your password with anyone.",
      "",
      "Unfortunately, the transmission of information via the internet is not completely secure. Although we do our best to protect your personal information, we cannot guarantee the security of your personal information transmitted to our website. Any transmission of personal information is at your own risk."
    ]
    return "\n".join(content_parts)
  
  def format_public_policy_changes():
    """Format the policy changes section for public notice"""
    content_parts = [
      "We may update our privacy statement from time to time. If we make material changes to how we treat our users' personal information, we will post the new privacy statement on this page.",
      "",
      "The date the privacy statement was last revised is identified at the top of the page. You are responsible for periodically visiting our website and this privacy statement to check for any changes."
    ]
    return "\n".join(content_parts)
  
  def format_public_contact_information():
    """Format the contact information section for public notice"""
    content_parts = [
      "If you have any questions or comments about this privacy statement, our privacy practices, or if you would like to exercise your rights, please contact us by:",
      "",
      "* Email: [Privacy Officer Email]",
      "* Phone: [Privacy Officer Phone]",
      "* Mail: [Company Address]",
      "",
      f"{company.name}",
      "Attn: Privacy Officer",
      "[Street Address]",
      "[City, State ZIP]"
    ]
    return "\n".join(content_parts)
---
code: |
  def generate_physical_notice():
    """Generate physical location privacy notice"""
    global physical_notice
    
    template_parts = [
      "# Privacy Notice for {company_name} Location",
      "",
      "**Effective Date**: {effective_date}",
      "",
      "## This Notice Describes:",
      "* What personal information we collect",
      "* How we use your information", 
      "* Your privacy rights",
      "* How to contact us",
      "",
      "## Information We Collect",
      "{physical_information_collected}",
      "",
      "## How We Use Your Information",
      "{physical_information_use}",
      "",
      "## Your Privacy Rights",
      "{physical_privacy_rights}",
      "",
      "## Contact Us",
      "{physical_contact_information}"
    ]
    
    template = "\n".join(template_parts)
    
    # Build context for template
    context = {
      "company_name": company.name,
      "effective_date": today().strftime("%B %d, %Y"),
      "physical_information_collected": format_physical_information_collected(),
      "physical_information_use": format_physical_information_use(),
      "physical_privacy_rights": format_physical_privacy_rights(),
      "physical_contact_information": format_physical_contact_information()
    }
    
    # Format the template with context
    physical_notice = template.format(**context)
    
    return physical_notice
  
  def format_physical_information_collected():
    """Format the information collected section for physical notice"""
    content_parts = [
      "We may collect the following information:",
      "* Contact information (name, address, phone, email)",
      "* Payment information", 
      "* Video surveillance (for security purposes)",
      "* Visit information"
    ]
    return "\n".join(content_parts)
  
  def format_physical_information_use():
    """Format the information use section for physical notice"""
    content_parts = [
      "We use your information to:",
      "* Provide services",
      "* Process transactions",
      "* Maintain security",
      "* Communicate with you",
      "* Comply with legal obligations"
    ]
    return "\n".join(content_parts)
  
  def format_physical_privacy_rights():
    """Format the privacy rights section for physical notice"""
    rights_text = "You have the right to:"
    
    if "ccpa" in applicable_jurisdictions:
      rights_parts = [
        "",
        "* Know what personal information we collect",
        "* Delete your personal information",
        "* Opt-out of the sale of your information", 
        "* Non-discrimination for exercising your rights"
      ]
      rights_text += "\n".join(rights_parts)
    
    elif "tdpsa" in applicable_jurisdictions:
      rights_parts = [
        "",
        "* Access your personal information",
        "* Correct inaccurate information",
        "* Delete your personal information",
        "* Opt-out of targeted advertising",
        "* Opt-out of the sale of your information"
      ]
      rights_text += "\n".join(rights_parts)
    
    elif "gdpr" in applicable_jurisdictions:
      rights_parts = [
        "",
        "* Access your personal data",
        "* Correct inaccurate data", 
        "* Delete your personal data",
        "* Restrict or object to processing",
        "* Data portability"
      ]
      rights_text += "\n".join(rights_parts)
    
    else:
      rights_parts = [
        "",
        "* Access your personal information",
        "* Request changes to inaccurate information",
        "* Request deletion of your information"
      ]
      rights_text += "\n".join(rights_parts)
    
    rights_text += "\n\nFor our full privacy policy, visit: [Website URL] or request a copy from staff."
    
    return rights_text
  
  def format_physical_contact_information():
    """Format the contact information section for physical notice"""
    content_parts = [
      "For privacy inquiries:",
      "* Email: [Privacy Email]",
      "* Phone: [Privacy Phone]",
      "* Ask our staff for assistance",
      "",
      f"{company.name}",
      "[Company Website]"
    ]
    return "\n".join(content_parts)
---
code: |
  def create_remediation_plan():
    """Generate remediation plan document"""