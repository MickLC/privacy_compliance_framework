# modules/jurisdiction_registry.yml - JSON-Driven Jurisdiction Registry Module with Lazy Loading
---
# Initialize jurisdiction registry early
code: |
  jurisdiction_registry = load_jurisdiction_registry()
---
question: "Step 2: Jurisdictional Analysis"
subquestion: |
  Based on your business profile, we'll now determine which privacy laws apply to your operations.
  
  The system will analyze:
  - Where your business operates
  - Where your customers/clients are located
  - Your industry-specific regulations
  - Data volumes and types you process

continue button field: show_jurisdiction_intro
---
code: |
  def get_jurisdiction_requirements(jurisdiction_id):
    """Load jurisdiction requirements fresh each time - no session storage"""
    jurisdiction_files = {
      'gdpr': 'data/sources/gdpr_requirements.json',
      'ccpa': 'data/sources/ccpa_requirements.json',
      'tdpsa': 'data/sources/tdpsa_requirements.json'
    }
    
    file_path = jurisdiction_files.get(jurisdiction_id)
    if file_path:
      try:
        import json
        json_file = path_and_mimetype(file_path)[0]
        with open(json_file, 'r') as f:
          return json.load(f)
      except Exception as e:
        log(f"Error loading {jurisdiction_id}: {e}")
        return {}
    return {}

  def load_jurisdiction_registry():
    """Load the registry metadata without storing full requirements"""
    global jurisdiction_registry
    
    if not defined('jurisdiction_registry'):
      jurisdiction_registry = {
        "jurisdictions": [
          {
            "id": "gdpr",
            "name": "General Data Protection Regulation",
            "short_name": "GDPR",
            "region": "europe",
            "type": "comprehensive",
            "effective_date": "2018-05-25",
            "latest_amendment": "2023-01-01",
            "applicability_function": "is_gdpr_applicable"
          },
          {
            "id": "ccpa",
            "name": "California Consumer Privacy Act / California Privacy Rights Act",
            "short_name": "CCPA/CPRA",
            "region": "united_states",
            "type": "comprehensive",
            "effective_date": "2020-01-01",
            "latest_amendment": "2023-01-01",
            "applicability_function": "is_ccpa_applicable"
          },
          {
            "id": "tdpsa",
            "name": "Texas Data Privacy and Security Act",
            "short_name": "TDPSA",
            "region": "united_states",
            "type": "comprehensive",
            "effective_date": "2024-07-01",
            "latest_amendment": None,
            "applicability_function": "is_tdpsa_applicable"
          }
        ]
      }
    
    return jurisdiction_registry
---
code: |
  def determine_applicable_jurisdictions():
    """Determine which privacy jurisdictions apply using lazy loading"""
    global applicable_jurisdictions
    applicable_jurisdictions = []
    
    jurisdiction_ids = ['gdpr', 'ccpa', 'tdpsa']
    
    # For each jurisdiction, check applicability using fresh-loaded config
    for jurisdiction_id in jurisdiction_ids:
      config = get_jurisdiction_requirements(jurisdiction_id)
      if check_jurisdiction_applicability(jurisdiction_id, config):
        applicable_jurisdictions.append(jurisdiction_id)
    
    return applicable_jurisdictions
  
  def check_jurisdiction_applicability(jurisdiction_id, config):
    """Check if jurisdiction applies using fresh-loaded config"""
    applicability_checks = config.get('applicabilityChecks', [])
    
    if not applicability_checks:
      # Fallback to hardcoded functions if no JSON rules
      func_name = f"is_{jurisdiction_id}_applicable"
      if func_name in globals():
        return globals()[func_name]()
      return False
    
    # Evaluate JSON applicability rules
    for check in applicability_checks:
      if evaluate_applicability_check(check):
        return True
    
    return False
  
  def evaluate_applicability_check(check):
    """Evaluate individual applicability check from JSON with compound logic support"""
    check_type = check.get('type')

    if check_type == 'custom_function':
      function_name = check.get('function')
      if function_name == 'not_small_business_tdpsa':
        return not is_small_business_under_tdpsa(
          company.naics_code if defined('company.naics_code') else None,
          company.employee_count if defined('company.employee_count') else 0,
          company.annual_revenue if defined('company.annual_revenue') else 0
        )
      # Add more custom functions as needed
      else:
        log(f"Unknown custom function: {function_name}")
        return False
      
    # Handle compound conditions
    if check_type == 'compound':
      operator = check.get('operator', 'and')
      conditions = check.get('conditions', [])
          
      if operator == 'and':
        return all(evaluate_applicability_check(condition) for condition in conditions)
      elif operator == 'or':
        return any(evaluate_applicability_check(condition) for condition in conditions)
      else:
        log(f"Unknown compound operator: {operator}")
        return False
      
    # Handle sequential checks (for prerequisite logic)
    if check_type == 'sequential':
      conditions = check.get('conditions', [])
      for condition in conditions:
        if not evaluate_applicability_check(condition):
          return False
        return True
      
    # Handle simple field checks
    field = check.get('field')
    operator = check.get('operator', 'equals')
    value = check.get('value')
      
    if not field:
      log(f"Missing field in check: {check}")
      return False
      
    # Get field value with support for nested attributes
    field_value = get_field_value(field)
      
    # Handle special operators for different field types
    return evaluate_operator(field_value, operator, value, field)

  def get_field_value(field):
      """Get field value with support for nested attributes and special cases"""
      if '.' in field:
          # Handle nested attributes like company.annual_revenue
          parts = field.split('.')
          field_value = globals().get(parts[0])
          for part in parts[1:]:
              if field_value is None:
                  return None
              field_value = getattr(field_value, part, None)
          return field_value
      else:
          return globals().get(field)

  def evaluate_operator(field_value, operator, value, field_name):
      """Evaluate operator with proper handling for different field types"""
      # Handle checkbox fields (DADict)
      if field_name == 'states_with_locations' and hasattr(field_value, 'true_values'):
          if operator == 'contains':
              return value in field_value.true_values()
          elif operator == 'contains_any':
              return any(v in field_value.true_values() for v in value)
      
      # Handle None values
      if field_value is None:
          return operator in ['equals', 'not_equals'] and value is None
      
      # Standard operators
      if operator == 'equals':
          return field_value == value
      elif operator == 'not_equals':
          return field_value != value
      elif operator == 'greater_than':
          try:
              return float(field_value) > float(value)
          except (ValueError, TypeError):
              return False
      elif operator == 'greater_than_or_equal':
          try:
              return float(field_value) >= float(value)
          except (ValueError, TypeError):
              return False
      elif operator == 'less_than':
          try:
              return float(field_value) < float(value)
          except (ValueError, TypeError):
              return False
      elif operator == 'less_than_or_equal':
          try:
              return float(field_value) <= float(value)
          except (ValueError, TypeError):
              return False
      elif operator == 'contains':
          if hasattr(field_value, '__contains__'):
              return value in field_value
          return False
      elif operator == 'contains_any':
          if hasattr(field_value, '__contains__'):
              return any(v in field_value for v in value)
          return False
      elif operator == 'not_contains':
          if hasattr(field_value, '__contains__'):
              return value not in field_value
          return True
      elif operator == 'in_list':
          return field_value in value if isinstance(value, list) else False
      elif operator == 'not_in_list':
          return field_value not in value if isinstance(value, list) else True
      else:
          log(f"Unknown operator: {operator}")
          return False

  def get_field_value(field):
      """Get field value with support for nested attributes and special cases"""
      if '.' in field:
          # Handle nested attributes like company.annual_revenue
          parts = field.split('.')
          field_value = globals().get(parts[0])
          for part in parts[1:]:
              if field_value is None:
                  return None
              field_value = getattr(field_value, part, None)
          return field_value
      else:
          return globals().get(field)

  def evaluate_operator(field_value, operator, value, field_name):
      """Evaluate operator with proper handling for different field types"""
      # Handle checkbox fields (DADict)
      if field_name == 'states_with_locations' and hasattr(field_value, 'true_values'):
          if operator == 'contains':
              return value in field_value.true_values()
          elif operator == 'contains_any':
              return any(v in field_value.true_values() for v in value)
      
      # Handle None values
      if field_value is None:
          return operator in ['equals', 'not_equals'] and value is None
      
      # Standard operators
      if operator == 'equals':
          return field_value == value
      elif operator == 'not_equals':
          return field_value != value
      elif operator == 'greater_than':
          try:
              return float(field_value) > float(value)
          except (ValueError, TypeError):
              return False
      elif operator == 'greater_than_or_equal':
          try:
              return float(field_value) >= float(value)
          except (ValueError, TypeError):
              return False
      elif operator == 'less_than':
          try:
              return float(field_value) < float(value)
          except (ValueError, TypeError):
              return False
      elif operator == 'less_than_or_equal':
          try:
              return float(field_value) <= float(value)
          except (ValueError, TypeError):
              return False
      elif operator == 'contains':
          if hasattr(field_value, '__contains__'):
              return value in field_value
          return False
      elif operator == 'contains_any':
          if hasattr(field_value, '__contains__'):
              return any(v in field_value for v in value)
          return False
      elif operator == 'not_contains':
          if hasattr(field_value, '__contains__'):
              return value not in field_value
          return True
      elif operator == 'in_list':
          return field_value in value if isinstance(value, list) else False
      elif operator == 'not_in_list':
          return field_value not in value if isinstance(value, list) else True
      else:
          log(f"Unknown operator: {operator}")
          return False
    
    # Fallback applicability functions (for backward compatibility)
    def is_gdpr_applicable():
      """Determine if GDPR applies"""
      return serves_eu or has_eu_establishment
    
    def is_ccpa_applicable():
      """Determine if CCPA/CPRA applies"""
      has_california_connection = (
          (defined('states_with_locations') and states_with_locations['California']) or
      california_records > 0
      )
      
      if not has_california_connection:
          return False
      
      # Then check thresholds
      revenue_threshold = company.annual_revenue >= 25000000
      volume_threshold = california_records >= 100000
      sale_threshold = (california_records >= 50000 and sells_personal_info)
      
      return revenue_threshold or volume_threshold or sale_threshold
    
    def is_tdpsa_applicable():
      """Determine if Texas TDPSA applies"""
      # Check if business has Texas presence
      has_texas_presence = ('Texas' in states_with_locations or texas_records > 0)
      
      if not has_texas_presence:
        return False
      
      # Check data volume thresholds
      meets_data_thresholds = (texas_records >= 100000 or 
                              (texas_records >= 25000 and sells_personal_info))
      
      if not meets_data_thresholds:
        return False
      
      # Check if business qualifies as small business (exempt from TDPSA)
      if (defined('company.naics_code') and defined('company.employee_count') and 
          defined('company.annual_revenue')):
        
        is_small_business = is_small_business_under_tdpsa(
          company.naics_code, 
          company.employee_count, 
          company.annual_revenue
        )
        
        # TDPSA applies if NOT a small business
        return not is_small_business
      else:
        # Fallback to simple check if NAICS data not available
        is_small_business = company.employee_count < 100 and company.annual_revenue < 10000000
        return not is_small_business
    
    def is_hipaa_applicable():
      """Determine if HIPAA applies - Enhanced with NAICS code analysis"""
      # First check NAICS code indication
      naics_suggests_hipaa = False
      if defined('company.naics_code') and company.naics_code:
        naics_suggests_hipaa = is_hipaa_applicable_by_naics(company.naics_code)
      
      # Combine NAICS indication with user responses
      user_indicates_hipaa = (is_hipaa_covered_entity if defined('is_hipaa_covered_entity') else False or 
                            is_hipaa_business_associate if defined('is_hipaa_business_associate') else False or 
                            processes_phi if defined('processes_phi') else False)
      
      # HIPAA applies if either NAICS suggests it OR user confirmed it
      return naics_suggests_hipaa or user_indicates_hipaa
    
    def is_glba_applicable():
      """Determine if GLBA applies - Enhanced with NAICS code analysis"""
      # First check NAICS code indication
      naics_suggests_glba = False
      if defined('company.naics_code') and company.naics_code:
        naics_suggests_glba = is_glba_applicable_by_naics(company.naics_code)
      
      # Combine NAICS indication with user responses
      user_indicates_glba = (is_glba_financial_institution if defined('is_glba_financial_institution') else False or 
                            (provides_financial_products if defined('provides_financial_products') else False and 
                            collects_npi if defined('collects_npi') else False))
      
      # GLBA applies if either NAICS suggests it OR user confirmed it
      return naics_suggests_glba or user_indicates_glba
---
question: Debug Information
subquestion: |
  **Debug Values:**
  
  * california_records: ${ california_records }
  * states_with_locations: ${ states_with_locations }
  * company.annual_revenue: ${ company.annual_revenue }
  * sells_personal_info: ${ sells_personal_info }
  
  **CCPA Check Results:**
  
  * Revenue threshold met: ${ company.annual_revenue >= 25000000 }
  * California records threshold: ${ california_records >= 100000 }
  * California presence: ${ 'California' in states_with_locations.true_values() }
  * California in true_values: ${ 'California' in states_with_locations.true_values() }
  * California checkbox value: ${ states_with_locations.get('California', 'Not set') }
  * California records > 0: ${ california_records > 0 }
  
continue button field: debug_values
---
question: Applicable Privacy Laws
subquestion: |
  Based on your responses, the following privacy laws apply to your organization:
  
  % if not applicable_jurisdictions:
  **No privacy laws were found to be applicable based on the information provided.**
  
  This might be because your organization falls under small business exemptions or does not process personal data in jurisdictions with comprehensive privacy laws.
  % else:
  % for jurisdiction_id in applicable_jurisdictions:
  * **${ next((j["name"] for j in jurisdiction_registry["jurisdictions"] if j["id"] == jurisdiction_id), jurisdiction_id) }**
  % endfor
  
  % if "tdpsa" in applicable_jurisdictions:
  **Note**: TDPSA applicability was determined using SBA size standards for your NAICS code (${ company_naics_display if defined('company_naics_display') else 'Not specified' }).
  % endif
  
  % if "hipaa" in applicable_jurisdictions and defined('company.naics_code'):
  **Note**: HIPAA applicability was indicated by your healthcare industry classification.
  % endif
  
  % if "glba" in applicable_jurisdictions and defined('company.naics_code'):
  **Note**: GLBA applicability was indicated by your financial services industry classification.
  % endif
  % endif
  
  These laws will determine the requirements for your privacy documentation and practices.
continue button field: applicable_law_continue
continue button label: "Continue to Current Practices Assessment"
---