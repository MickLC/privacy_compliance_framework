# modules/jurisdiction_registry.yml - JSON-Driven Jurisdiction Registry Module with Lazy Loading
---
# Initialize jurisdiction registry early
code: |
  jurisdiction_registry = load_jurisdiction_registry()
---
question: "Step 2: Jurisdictional Analysis"
subquestion: |
  Based on your business profile, we'll now determine which privacy laws apply to your operations.
  
  The system will analyze:
  - Where your business operates
  - Where your customers/clients are located
  - Your industry-specific regulations
  - Data volumes and types you process

continue button field: show_jurisdiction_intro
---
code: |
  def get_jurisdiction_requirements(jurisdiction_id):
    """Load jurisdiction requirements fresh each time - no session storage"""
    jurisdiction_files = {
      'gdpr': 'data/sources/gdpr_requirements.json',
      'ccpa': 'data/sources/ccpa_requirements.json',
      'tdpsa': 'data/sources/tdpsa_requirements.json'
    }
    
    file_path = jurisdiction_files.get(jurisdiction_id)
    if file_path:
      try:
        import json
        json_file = path_and_mimetype(file_path)[0]
        with open(json_file, 'r') as f:
          return json.load(f)
      except Exception as e:
        log(f"Error loading {jurisdiction_id}: {e}")
        return {}
    return {}

  def load_jurisdiction_registry():
    """Load the registry metadata without storing full requirements"""
    global jurisdiction_registry
    
    if not defined('jurisdiction_registry'):
      jurisdiction_registry = {
        "jurisdictions": [
          {
            "id": "gdpr",
            "name": "General Data Protection Regulation",
            "short_name": "GDPR",
            "region": "europe",
            "type": "comprehensive",
            "effective_date": "2018-05-25",
            "latest_amendment": "2023-01-01",
            "applicability_function": "is_gdpr_applicable"
          },
          {
            "id": "ccpa",
            "name": "California Consumer Privacy Act / California Privacy Rights Act",
            "short_name": "CCPA/CPRA",
            "region": "united_states",
            "type": "comprehensive",
            "effective_date": "2020-01-01",
            "latest_amendment": "2023-01-01",
            "applicability_function": "is_ccpa_applicable"
          },
          {
            "id": "tdpsa",
            "name": "Texas Data Privacy and Security Act",
            "short_name": "TDPSA",
            "region": "united_states",
            "type": "comprehensive",
            "effective_date": "2024-07-01",
            "latest_amendment": None,
            "applicability_function": "is_tdpsa_applicable"
          }
        ]
      }
    
    return jurisdiction_registry
---
code: |
  def determine_applicable_jurisdictions():
    """Determine which privacy jurisdictions apply using lazy loading"""
    global applicable_jurisdictions
    applicable_jurisdictions = []
    
    jurisdiction_ids = ['gdpr', 'ccpa', 'tdpsa']
    
    # For each jurisdiction, check applicability using fresh-loaded config
    for jurisdiction_id in jurisdiction_ids:
      config = get_jurisdiction_requirements(jurisdiction_id)
      if check_jurisdiction_applicability(jurisdiction_id, config):
        applicable_jurisdictions.append(jurisdiction_id)
    
    return applicable_jurisdictions
  
  def check_jurisdiction_applicability(jurisdiction_id, config):
    """Check if jurisdiction applies using fresh-loaded config"""
    applicability_checks = config.get('applicabilityChecks', [])
    
    if not applicability_checks:
      # Fallback to hardcoded functions if no JSON rules
      func_name = f"is_{jurisdiction_id}_applicable"
      if func_name in globals():
        return globals()[func_name]()
      return False
    
    # Evaluate JSON applicability rules
    for check in applicability_checks:
      if evaluate_applicability_check(check):
        return True
    
    return False
  
  def evaluate_applicability_check(check):
    """Evaluate individual applicability check from JSON with compound logic support"""
    check_type = check.get('type')

    if check_type == 'custom_function':
      function_name = check.get('function')
      if function_name == 'not_small_business_tdpsa':
        return not is_small_business_under_tdpsa(
          company.naics_code if defined('company.naics_code') else None,
          company.employee_count if defined('company.employee_count') else 0,
          company.annual_revenue if defined('company.annual_revenue') else 0
        )
      # Add more custom functions as needed
      else:
        log(f"Unknown custom function: {function_name}")
        return False
      
    # Handle compound conditions
    if check_type == 'compound':
      operator = check.get('operator', 'and')
      conditions = check.get('conditions', [])
          
      if operator == 'and':
        return all(evaluate_applicability_check(condition) for condition in conditions)
      elif operator == 'or':
        return any(evaluate_applicability_check(condition) for condition in conditions)
      else:
        log(f"Unknown compound operator: {operator}")
        return False
      
    # Handle sequential checks (for prerequisite logic)
    if check_type == 'sequential':
      conditions = check.get('conditions', [])
      for condition in conditions:
        if not evaluate_applicability_check(condition):
          return False
        return True
      
    # Handle simple field checks
    field = check.get('field')
    operator = check.get('operator', 'equals')
    value = check.get('value')
      
    if not field:
      log(f"Missing field in check: {check}")
      return False
      
    # Get field value with support for nested attributes
    field_value = get_field_value(field)
      
    # Handle special operators for different field types
    return evaluate_operator(field_value, operator, value, field)

  def get_field_value(field):
    """Get field value with support for nested attributes and special cases"""
    if '.' in field:
      # Handle nested attributes like company.annual_revenue
      parts = field.split('.')
      field_value = globals().get(parts[0])
      for part in parts[1:]:
        if field_value is None:
          return None
        field_value = getattr(field_value, part, None)
      return field_value
    else:
      return globals().get(field)

  def evaluate_operator(field_value, operator, value, field_name):
    """Evaluate operator with proper handling for different field types"""
    # Handle checkbox fields (DADict)
    if field_name == 'states_with_locations' and hasattr(field_value, 'true_values'):
      if operator == 'contains':
        return value in field_value.true_values()
      elif operator == 'contains_any':
        return any(v in field_value.true_values() for v in value)
    
    # Handle None values
    if field_value is None:
      return operator in ['equals', 'not_equals'] and value is None
    
    # Standard operators
    if operator == 'equals':
      return field_value == value
    elif operator == 'not_equals':
      return field_value != value
    elif operator == 'greater_than':
      try:
        return float(field_value) > float(value)
      except (ValueError, TypeError):
        return False
    elif operator == 'greater_than_or_equal':
      try:
        return float(field_value) >= float(value)
      except (ValueError, TypeError):
        return False
    elif operator == 'less_than':
      try:
        return float(field_value) < float(value)
      except (ValueError, TypeError):
        return False
    elif operator == 'less_than_or_equal':
      try:
        return float(field_value) <= float(value)
      except (ValueError, TypeError):
        return False
    elif operator == 'contains':
      if hasattr(field_value, '__contains__'):
        return value in field_value
      return False
    elif operator == 'contains_any':
      if hasattr(field_value, '__contains__'):
        return any(v in field_value for v in value)
      return False
    elif operator == 'not_contains':
      if hasattr(field_value, '__contains__'):
        return value not in field_value
      return True
    elif operator == 'in_list':
      return field_value in value if isinstance(value, list) else False
    elif operator == 'not_in_list':
      return field_value not in value if isinstance(value, list) else True
    else:
      log(f"Unknown operator: {operator}")
      return False
---
code: |
  # NAICS and SBA Size Standard Functions (needed for TDPSA analysis)
  def is_small_business_under_tdpsa(naics_code, employee_count, annual_revenue):
    """Determine if business qualifies as small business under TDPSA using SBA size standards"""
    try:
      # Extract just the code if it's in "code: description" format
      if ':' in str(naics_code):
        naics_code = str(naics_code).split(':')[0].strip()
      
      # Get NAICS info from local file
      naics_info = get_naics_info_for_code(naics_code)
      if not naics_info:
        # TDPSA general small business exemption: < 100 employees AND < $10M revenue
        return employee_count < 100 and annual_revenue < 10000000
      
      # Get SBA size standards from the JSON
      employee_limit = naics_info.get('employeeCountLimit')
      revenue_limit = naics_info.get('revenueLimit')
      
      # Convert revenue limit from millions to actual dollars
      if revenue_limit and revenue_limit < 1000:  # Values are in millions
        revenue_limit = revenue_limit * 1000000
      
      # SBA considers you small if you're AT OR UNDER the limit
      sba_qualifies_as_small = True
      
      if employee_limit:
        sba_qualifies_as_small = sba_qualifies_as_small and (employee_count <= employee_limit)
      
      if revenue_limit:
        sba_qualifies_as_small = sba_qualifies_as_small and (annual_revenue <= revenue_limit)
      
      # For TDPSA, also apply the statutory small business definition
      tdpsa_qualifies_as_small = employee_count < 100 and annual_revenue < 10000000
      
      # Business is small if it meets EITHER SBA standards OR TDPSA general standards
      return sba_qualifies_as_small or tdpsa_qualifies_as_small
        
    except Exception as e:
      log(f"Small business determination error: {e}")
      # Conservative fallback - use TDPSA general standards
      return employee_count < 100 and annual_revenue < 10000000
  
  def get_naics_info_for_code(naics_code):
    """Get specific NAICS info from local file"""
    try:
      naics_file = path_and_mimetype('data/sources/naics.json')[0]
      with open(naics_file, 'r') as f:
        naics_data = json.load(f)
      
      # Find the NAICS entry
      return next((item for item in naics_data if str(item.get('id')) == str(naics_code)), None)
    except Exception as e:
      log(f"NAICS info loading error: {e}")
      return None
  
  def is_hipaa_applicable_by_naics(naics_code):
    """Check if NAICS code indicates HIPAA applicability"""
    if not naics_code:
      return False
    
    # Extract just the code
    if ':' in str(naics_code):
      naics_code = str(naics_code).split(':')[0].strip()
    
    try:
      # Get NAICS info for this specific code
      naics_info = get_naics_info_for_code(naics_code)
      if naics_info:
        sector_desc = naics_info.get('sectorDescription', '')
        # Healthcare sector indicates potential HIPAA applicability
        return 'Health Care' in sector_desc
      
    except Exception as e:
      log(f"HIPAA applicability check error: {e}")
    
    # Fallback to subsector check
    healthcare_subsectors = ['621', '622', '623']  # Ambulatory, Hospitals, Nursing
    naics_prefix = str(naics_code)[:3]
    return naics_prefix in healthcare_subsectors
  
  def is_glba_applicable_by_naics(naics_code):
    """Check if NAICS code indicates GLBA applicability"""  
    if not naics_code:
      return False
    
    # Extract just the code
    if ':' in str(naics_code):
      naics_code = str(naics_code).split(':')[0].strip()
    
    try:
      # Get NAICS info for this specific code
      naics_info = get_naics_info_for_code(naics_code)
      if naics_info:
        sector_desc = naics_info.get('sectorDescription', '')
        # Finance and Insurance sector indicates GLBA applicability
        return 'Finance and Insurance' in sector_desc
      
    except Exception as e:
      log(f"GLBA applicability check error: {e}")
    
    # Fallback to subsector check
    financial_subsectors = ['521', '522', '523', '524', '525']
    naics_prefix = str(naics_code)[:3]
    return naics_prefix in financial_subsectors

  # Fallback applicability functions (for backward compatibility)
  def is_gdpr_applicable():
    """Determine if GDPR applies"""
    return serves_eu or has_eu_establishment
  
  def is_ccpa_applicable():
    """Determine if CCPA/CPRA applies"""
    has_california_connection = (
        (defined('states_with_locations') and 'California' in states_with_locations.true_values()) or
        california_records > 0
    )
    
    if not has_california_connection:
        return False
    
    # Then check thresholds
    revenue_threshold = company.annual_revenue >= 25000000
    volume_threshold = california_records >= 100000
    sale_threshold = (california_records >= 50000 and sells_personal_info)
    
    return revenue_threshold or volume_threshold or sale_threshold
  
  def is_tdpsa_applicable():
    """Determine if Texas TDPSA applies"""
    # Check if business has Texas presence
    has_texas_presence = ('Texas' in states_with_locations.true_values() or texas_records > 0)
    
    if not has_texas_presence:
      return False
    
    # Check data volume thresholds
    meets_data_thresholds = (texas_records >= 100000 or 
                            (texas_records >= 25000 and sells_personal_info))
    
    if not meets_data_thresholds:
      return False
    
    # Check if business qualifies as small business (exempt from TDPSA)
    if (defined('company.naics_code') and defined('company.employee_count') and 
        defined('company.annual_revenue')):
      
      is_small_business = is_small_business_under_tdpsa(
        company.naics_code, 
        company.employee_count, 
        company.annual_revenue
      )
      
      # TDPSA applies if NOT a small business
      return not is_small_business
    else:
      # Fallback to simple check if NAICS data not available
      is_small_business = company.employee_count < 100 and company.annual_revenue < 10000000
      return not is_small_business
  
  def is_hipaa_applicable():
    """Determine if HIPAA applies - Enhanced with NAICS code analysis"""
    # First check NAICS code indication
    naics_suggests_hipaa = False
    if defined('company.naics_code') and company.naics_code:
      naics_suggests_hipaa = is_hipaa_applicable_by_naics(company.naics_code)
    
    # Combine NAICS indication with user responses
    user_indicates_hipaa = (is_hipaa_covered_entity if defined('is_hipaa_covered_entity') else False or 
                          is_hipaa_business_associate if defined('is_hipaa_business_associate') else False or 
                          processes_phi if defined('processes_phi') else False)
    
    # HIPAA applies if either NAICS suggests it OR user confirmed it
    return naics_suggests_hipaa or user_indicates_hipaa
  
  def is_glba_applicable():
    """Determine if GLBA applies - Enhanced with NAICS code analysis"""
    # First check NAICS code indication
    naics_suggests_glba = False
    if defined('company.naics_code') and company.naics_code:
      naics_suggests_glba = is_glba_applicable_by_naics(company.naics_code)
    
    # Combine NAICS indication with user responses
    user_indicates_glba = (is_glba_financial_institution if defined('is_glba_financial_institution') else False or 
                          (provides_financial_products if defined('provides_financial_products') else False and 
                          collects_npi if defined('collects_npi') else False))
    
    # GLBA applies if either NAICS suggests it OR user confirmed it
    return naics_suggests_glba or user_indicates_glba
---
question: Comprehensive Jurisdiction Debug Analysis
subquestion: |
  ## Business Profile Values
  
  **Company Information:**
  * Company Name: ${ company.name if defined('company.name') else 'Not set' }
  * NAICS Code: ${ company.naics_code if defined('company.naics_code') else 'Not set' }
  * Industry: ${ company.industry if defined('company.industry') else 'Not set' }
  * Employee Count: ${ company.employee_count if defined('company.employee_count') else 'Not set' }
  * Annual Revenue: ${ "${:,.0f}".format(company.annual_revenue) if defined('company.annual_revenue') else 'Not set' }
  
  ## Geographic and Data Volume Values
  
  **Location and Presence:**
  * Business has website: ${ business_has_website if defined('business_has_website') else 'Not set' }
  * Business has physical location: ${ business_has_physical_location if defined('business_has_physical_location') else 'Not set' }
  * States with locations (raw): ${ states_with_locations if defined('states_with_locations') else 'Not set' }
  * States with locations (true_values): ${ list(states_with_locations.true_values()) if defined('states_with_locations') and hasattr(states_with_locations, 'true_values') else 'Not available' }
  * States with locations (all keys): ${ list(states_with_locations.keys()) if defined('states_with_locations') and hasattr(states_with_locations, 'keys') else 'Not available' }
  
  **California-Specific:**
  * California records: ${ california_records if defined('california_records') else 'Not set' }
  * California in states (bracket): ${ states_with_locations.get('California', 'Not found') if defined('states_with_locations') and hasattr(states_with_locations, 'get') else 'Cannot check' }
  * California in states (true_values): ${ 'California' in states_with_locations.true_values() if defined('states_with_locations') and hasattr(states_with_locations, 'true_values') else 'Cannot check' }
  
  **Texas-Specific:**
  * Texas records: ${ texas_records if defined('texas_records') else 'Not set' }
  * Texas in states (bracket): ${ states_with_locations.get('Texas', 'Not found') if defined('states_with_locations') and hasattr(states_with_locations, 'get') else 'Cannot check' }
  * Texas in states (true_values): ${ 'Texas' in states_with_locations.true_values() if defined('states_with_locations') and hasattr(states_with_locations, 'true_values') else 'Cannot check' }
  
  **EU-Specific:**
  * Serves EU: ${ serves_eu if defined('serves_eu') else 'Not set' }
  * Has EU establishment: ${ has_eu_establishment if defined('has_eu_establishment') else 'Not set' }
  * EU data subjects: ${ eu_data_subjects if defined('eu_data_subjects') else 'Not set' }
  
  ## Business Activity Values
  
  **Data Processing:**
  * Sells personal info: ${ sells_personal_info if defined('sells_personal_info') else 'Not set' }
  
  **Industry-Specific (Healthcare):**
  * Is HIPAA covered entity: ${ is_hipaa_covered_entity if defined('is_hipaa_covered_entity') else 'Not set' }
  * Is HIPAA business associate: ${ is_hipaa_business_associate if defined('is_hipaa_business_associate') else 'Not set' }
  * Processes PHI: ${ processes_phi if defined('processes_phi') else 'Not set' }
  
  **Industry-Specific (Financial):**
  * Is GLBA financial institution: ${ is_glba_financial_institution if defined('is_glba_financial_institution') else 'Not set' }
  * Provides financial products: ${ provides_financial_products if defined('provides_financial_products') else 'Not set' }
  * Collects NPI: ${ collects_npi if defined('collects_npi') else 'Not set' }
  
  ## Applicability Function Tests
  
  **CCPA/CPRA Analysis:**
  * CCPA Revenue threshold (≥$25M): ${ company.annual_revenue >= 25000000 if defined('company.annual_revenue') else 'Cannot determine' }
  * CCPA Volume threshold (≥100K CA records): ${ california_records >= 100000 if defined('california_records') else 'Cannot determine' }
  * CCPA Sale threshold (≥50K CA records + sells info): ${ (california_records >= 50000 and sells_personal_info) if defined('california_records') and defined('sells_personal_info') else 'Cannot determine' }
  * CCPA California connection test: ${ ('California' in states_with_locations.true_values() or california_records > 0) if defined('states_with_locations') and defined('california_records') and hasattr(states_with_locations, 'true_values') else 'Cannot determine' }
  * **CCPA Final Result**: ${ is_ccpa_applicable() if 'is_ccpa_applicable' in globals() else 'Function not available' }
  
  **TDPSA Analysis:**
  * TDPSA Volume threshold (≥100K TX records): ${ texas_records >= 100000 if defined('texas_records') else 'Cannot determine' }
  * TDPSA Sale threshold (≥25K TX records + sells info): ${ (texas_records >= 25000 and sells_personal_info) if defined('texas_records') and defined('sells_personal_info') else 'Cannot determine' }
  * TDPSA Texas connection test: ${ ('Texas' in states_with_locations.true_values() or texas_records > 0) if defined('states_with_locations') and defined('texas_records') and hasattr(states_with_locations, 'true_values') else 'Cannot determine' }
  * TDPSA Small business exemption: ${ is_small_business_under_tdpsa(company.naics_code, company.employee_count, company.annual_revenue) if defined('company.naics_code') and defined('company.employee_count') and defined('company.annual_revenue') and 'is_small_business_under_tdpsa' in globals() else 'Cannot determine' }
  * **TDPSA Final Result**: ${ is_tdpsa_applicable() if 'is_tdpsa_applicable' in globals() else 'Function not available' }
  
  **GDPR Analysis:**
  * GDPR EU connection test: ${ (serves_eu or has_eu_establishment) if defined('serves_eu') and defined('has_eu_establishment') else 'Cannot determine' }
  * **GDPR Final Result**: ${ is_gdpr_applicable() if 'is_gdpr_applicable' in globals() else 'Function not available' }
  
  **HIPAA Analysis:**
  * HIPAA NAICS indication: ${ is_hipaa_applicable_by_naics(company.naics_code) if defined('company.naics_code') and 'is_hipaa_applicable_by_naics' in globals() else 'Cannot determine' }
  * HIPAA user confirmation test: ${ (is_hipaa_covered_entity or is_hipaa_business_associate or processes_phi) if defined('is_hipaa_covered_entity') and defined('is_hipaa_business_associate') and defined('processes_phi') else 'Cannot determine' }
  * **HIPAA Final Result**: ${ is_hipaa_applicable() if 'is_hipaa_applicable' in globals() else 'Function not available' }
  
  **GLBA Analysis:**
  * GLBA NAICS indication: ${ is_glba_applicable_by_naics(company.naics_code) if defined('company.naics_code') and 'is_glba_applicable_by_naics' in globals() else 'Cannot determine' }
  * GLBA user confirmation test: ${ (is_glba_financial_institution or (provides_financial_products and collects_npi)) if defined('is_glba_financial_institution') and defined('provides_financial_products') and defined('collects_npi') else 'Cannot determine' }
  * **GLBA Final Result**: ${ is_glba_applicable() if 'is_glba_applicable' in globals() else 'Function not available' }
  
  ## System Function Availability
  
  **Function Status:**
  * is_ccpa_applicable function: ${ 'Available' if 'is_ccpa_applicable' in globals() else 'Not Available' }
  * is_tdpsa_applicable function: ${ 'Available' if 'is_tdpsa_applicable' in globals() else 'Not Available' }
  * is_gdpr_applicable function: ${ 'Available' if 'is_gdpr_applicable' in globals() else 'Not Available' }
  * is_hipaa_applicable function: ${ 'Available' if 'is_hipaa_applicable' in globals() else 'Not Available' }
  * is_glba_applicable function: ${ 'Available' if 'is_glba_applicable' in globals() else 'Not Available' }
  * is_small_business_under_tdpsa function: ${ 'Available' if 'is_small_business_under_tdpsa' in globals() else 'Not Available' }
  * is_hipaa_applicable_by_naics function: ${ 'Available' if 'is_hipaa_applicable_by_naics' in globals() else 'Not Available' }
  * is_glba_applicable_by_naics function: ${ 'Available' if 'is_glba_applicable_by_naics' in globals() else 'Not Available' }
  
  ## Final System Results
  
  **Determined Applicable Jurisdictions:**
  % if defined('applicable_jurisdictions'):
  % for jurisdiction_id in applicable_jurisdictions:
  * ${ jurisdiction_id.upper() }: ${ next((j["name"] for j in jurisdiction_registry["jurisdictions"] if j["id"] == jurisdiction_id), jurisdiction_id) if defined('jurisdiction_registry') else jurisdiction_id }
  % endfor
  % if not applicable_jurisdictions:
  * No jurisdictions found to be applicable
  % endif
  % else:
  * Applicable jurisdictions not yet determined
  % endif
  
  ## JSON-Based Evaluation Debug
  
  **JSON System Status:**
  * Jurisdiction registry loaded: ${ 'Yes' if defined('jurisdiction_registry') and jurisdiction_registry else 'No' }
  * Registry jurisdiction count: ${ len(jurisdiction_registry["jurisdictions"]) if defined('jurisdiction_registry') and jurisdiction_registry and "jurisdictions" in jurisdiction_registry else 'Cannot determine' }
  
  **JSON Evaluation Results:**
  % if defined('jurisdiction_registry') and jurisdiction_registry:
  % for jurisdiction in jurisdiction_registry["jurisdictions"]:
  * **${ jurisdiction["id"].upper() }**: 
    - JSON config loaded: ${ 'Yes' if get_jurisdiction_requirements(jurisdiction["id"]) else 'No' }
    - JSON config size: ${ len(str(get_jurisdiction_requirements(jurisdiction["id"]))) if get_jurisdiction_requirements(jurisdiction["id"]) else 'Empty' } characters
    - JSON applicability result: ${ check_jurisdiction_applicability(jurisdiction["id"], get_jurisdiction_requirements(jurisdiction["id"])) if 'check_jurisdiction_applicability' in globals() else 'Function not available' }
  % endfor
  % else:
  * Jurisdiction registry not loaded - cannot test JSON evaluation
  % endif
  
  ## Workflow Status
  
  **Completion Status:**
  * basic_business_info_complete: ${ basic_business_info_complete if defined('basic_business_info_complete') else 'Not set' }
  * naics_selection_complete: ${ naics_selection_complete if defined('naics_selection_complete') else 'Not set' }
  * business_profile_complete: ${ business_profile_complete if defined('business_profile_complete') else 'Not set' }
  * geographic_scope_complete: ${ geographic_scope_complete if defined('geographic_scope_complete') else 'Not set' }
  * show_jurisdiction_intro: ${ show_jurisdiction_intro if defined('show_jurisdiction_intro') else 'Not set' }

continue button field: debug_values
continue button label: "Continue Analysis"
---
question: Applicable Privacy Laws
subquestion: |
  Based on your responses, the following privacy laws apply to your organization:
  
  % if not applicable_jurisdictions:
  **No privacy laws were found to be applicable based on the information provided.**
  
  This might be because your organization falls under small business exemptions or does not process personal data in jurisdictions with comprehensive privacy laws.
  % else:
  % for jurisdiction_id in applicable_jurisdictions:
  * **${ next((j["name"] for j in jurisdiction_registry["jurisdictions"] if j["id"] == jurisdiction_id), jurisdiction_id) }**
  % endfor
  
  % if "tdpsa" in applicable_jurisdictions:
  **Note**: TDPSA applicability was determined using SBA size standards for your NAICS code (${ company_naics_display if defined('company_naics_display') else 'Not specified' }).
  % endif
  
  % if "hipaa" in applicable_jurisdictions and defined('company.naics_code'):
  **Note**: HIPAA applicability was indicated by your healthcare industry classification.
  % endif
  
  % if "glba" in applicable_jurisdictions and defined('company.naics_code'):
  **Note**: GLBA applicability was indicated by your financial services industry classification.
  % endif
  % endif
  
  These laws will determine the requirements for your privacy documentation and practices.
continue button field: applicable_law_continue
continue button label: "Continue to Current Practices Assessment"
---