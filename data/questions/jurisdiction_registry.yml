# modules/jurisdiction_registry.yml - JSON-Driven Jurisdiction Registry Module
---
objects from file:
  - gdpr_requirements: jurisdictions/europe/gdpr_requirements.json
  - ccpa_requirements: jurisdictions/united_states/states/california/ccpa_requirements.json
  - tdpsa_requirements: jurisdictions/united_states/states/texas/tdpsa_requirements.json
---
question: "Step 2: Jurisdictional Analysis"
subquestion: |
  Based on your business profile, we'll now determine which privacy laws apply to your operations.
  
  The system will analyze:
  - Where your business operates
  - Where your customers/clients are located
  - Your industry-specific regulations
  - Data volumes and types you process

continue button field: show_jurisdiction_intro
---
code: |
  def load_jurisdiction_registry():
    """Load the registry from JSON files"""
    global jurisdiction_registry
    
    if not defined('jurisdiction_registry'):
      jurisdiction_registry = {
        "jurisdictions": []
      }
      
      # Build registry from JSON files
      jurisdiction_configs = {
        'gdpr': gdpr_requirements,
        'ccpa': ccpa_requirements,
        'tdpsa': tdpsa_requirements
      }
      
      for jurisdiction_id, config in jurisdiction_configs.items():
        jurisdiction_info = {
          "id": jurisdiction_id,
          "name": config.get('name', jurisdiction_id.upper()),
          "short_name": config.get('shortName', jurisdiction_id.upper()),
          "region": config.get('region', 'Unknown'),
          "type": config.get('type', 'comprehensive'),
          "effective_date": config.get('effectiveDate', 'Unknown'),
          "latest_amendment": config.get('latestAmendment'),
          "applicability_function": f"is_{jurisdiction_id}_applicable"
        }
        jurisdiction_registry["jurisdictions"].append(jurisdiction_info)
    
    return jurisdiction_registry
---
code: |
  def determine_applicable_jurisdictions():
    """Determine which privacy jurisdictions apply using JSON-driven logic"""
    global applicable_jurisdictions
    applicable_jurisdictions = []
    
    jurisdiction_configs = {
      'gdpr': gdpr_requirements,
      'ccpa': ccpa_requirements,
      'tdpsa': tdpsa_requirements
    }
    
    # For each jurisdiction, check applicability using JSON rules
    for jurisdiction_id, config in jurisdiction_configs.items():
      if check_jurisdiction_applicability(jurisdiction_id, config):
        applicable_jurisdictions.append(jurisdiction_id)
    
    return applicable_jurisdictions
  
  def check_jurisdiction_applicability(jurisdiction_id, config):
    """Check if jurisdiction applies using JSON applicability checks"""
    applicability_checks = config.get('applicabilityChecks', [])
    
    if not applicability_checks:
      # Fallback to hardcoded functions if no JSON rules
      func_name = f"is_{jurisdiction_id}_applicable"
      if func_name in globals():
        return globals()[func_name]()
      return False
    
    # Evaluate JSON applicability rules
    for check in applicability_checks:
      if evaluate_applicability_check(check):
        return True
    
    return False
  
  def evaluate_applicability_check(check):
    """Evaluate individual applicability check from JSON"""
    check_type = check.get('type')
    field = check.get('field')
    operator = check.get('operator', 'equals')
    value = check.get('value')
    
    # Get the field value from globals
    field_value = globals().get(field)
    
    if operator == 'equals':
      return field_value == value
    elif operator == 'greater_than':
      return field_value > value if field_value else False
    elif operator == 'greater_than_or_equal':
      return field_value >= value if field_value else False
    elif operator == 'contains':
      return value in field_value if field_value else False
    
    # Handle complex conditions
    additional_condition = check.get('additional_condition')
    if additional_condition:
      additional_field = additional_condition.get('field')
      additional_operator = additional_condition.get('operator', 'equals')
      additional_value = additional_condition.get('value')
      additional_field_value = globals().get(additional_field)
      
      if additional_operator == 'equals':
        return field_value >= value and additional_field_value == additional_value
    
    return False
  
  # Fallback applicability functions (for backward compatibility)
  def is_gdpr_applicable():
    """Determine if GDPR applies"""
    return serves_eu or has_eu_establishment
  
  def is_ccpa_applicable():
    """Determine if CCPA/CPRA applies"""
    return ((company.annual_revenue >= 25000000 or 
             california_records >= 100000 or
             (california_records >= 50000 and sells_personal_info)) and
            ('California' in states_with_locations or california_records > 0))
  
  def is_tdpsa_applicable():
    """Determine if Texas TDPSA applies"""
    # Check if business has Texas presence
    has_texas_presence = ('Texas' in states_with_locations or texas_records > 0)
    
    if not has_texas_presence:
      return False
    
    # Check data volume thresholds
    meets_data_thresholds = (texas_records >= 100000 or 
                            (texas_records >= 25000 and sells_personal_info))
    
    if not meets_data_thresholds:
      return False
    
    # Check if business qualifies as small business (exempt from TDPSA)
    if (defined('company.naics_code') and defined('company.employee_count') and 
        defined('company.annual_revenue')):
      
      is_small_business = is_small_business_under_tdpsa(
        company.naics_code, 
        company.employee_count, 
        company.annual_revenue
      )
      
      # TDPSA applies if NOT a small business
      return not is_small_business
    else:
      # Fallback to simple check if NAICS data not available
      is_small_business = company.employee_count < 100 and company.annual_revenue < 10000000
      return not is_small_business
  
  def is_hipaa_applicable():
    """Determine if HIPAA applies - Enhanced with NAICS code analysis"""
    # First check NAICS code indication
    naics_suggests_hipaa = False
    if defined('company.naics_code') and company.naics_code:
      naics_suggests_hipaa = is_hipaa_applicable_by_naics(company.naics_code)
    
    # Combine NAICS indication with user responses
    user_indicates_hipaa = (is_hipaa_covered_entity if defined('is_hipaa_covered_entity') else False or 
                           is_hipaa_business_associate if defined('is_hipaa_business_associate') else False or 
                           processes_phi if defined('processes_phi') else False)
    
    # HIPAA applies if either NAICS suggests it OR user confirmed it
    return naics_suggests_hipaa or user_indicates_hipaa
  
  def is_glba_applicable():
    """Determine if GLBA applies - Enhanced with NAICS code analysis"""
    # First check NAICS code indication
    naics_suggests_glba = False
    if defined('company.naics_code') and company.naics_code:
      naics_suggests_glba = is_glba_applicable_by_naics(company.naics_code)
    
    # Combine NAICS indication with user responses
    user_indicates_glba = (is_glba_financial_institution if defined('is_glba_financial_institution') else False or 
                          (provides_financial_products if defined('provides_financial_products') else False and 
                           collects_npi if defined('collects_npi') else False))
    
    # GLBA applies if either NAICS suggests it OR user confirmed it
    return naics_suggests_glba or user_indicates_glba
---
code: |
  def load_requirements_for_jurisdictions():
    """Load detailed requirements for all applicable jurisdictions from JSON"""
    global jurisdiction_requirements
    jurisdiction_requirements = {}
    
    jurisdiction_configs = {
      'gdpr': gdpr_requirements,
      'ccpa': ccpa_requirements,
      'tdpsa': tdpsa_requirements
    }
    
    # For each applicable jurisdiction, store the full config
    for jurisdiction_id in applicable_jurisdictions:
      if jurisdiction_id in jurisdiction_configs:
        jurisdiction_requirements[jurisdiction_id] = jurisdiction_configs[jurisdiction_id]
    
    return jurisdiction_requirements
---
question: Applicable Privacy Laws
subquestion: |
  Based on your responses, the following privacy laws apply to your organization:
  
  % if not applicable_jurisdictions:
  **No privacy laws were found to be applicable based on the information provided.**
  
  This might be because your organization falls under small business exemptions or does not process personal data in jurisdictions with comprehensive privacy laws.
  % else:
  % for jurisdiction_id in applicable_jurisdictions:
  * **${ next((j["name"] for j in jurisdiction_registry["jurisdictions"] if j["id"] == jurisdiction_id), jurisdiction_id) }**
  % endfor
  
  % if "tdpsa" in applicable_jurisdictions:
  **Note**: TDPSA applicability was determined using SBA size standards for your NAICS code (${ company_naics_display if defined('company_naics_display') else 'Not specified' }).
  % endif
  
  % if "hipaa" in applicable_jurisdictions and defined('company.naics_code'):
  **Note**: HIPAA applicability was indicated by your healthcare industry classification.
  % endif
  
  % if "glba" in applicable_jurisdictions and defined('company.naics_code'):
  **Note**: GLBA applicability was indicated by your financial services industry classification.
  % endif
  % endif
  
  These laws will determine the requirements for your privacy documentation and practices.
continue button field: applicable_law_continue
continue button label: "Continue to Current Practices Assessment"
---