# modules/gap_analysis.yml - JSON-Driven Gap Analysis Module
---
objects from file:
  - gdpr_requirements: jurisdictions/europe/gdpr_requirements.json
  - ccpa_requirements: jurisdictions/united_states/states/california/ccpa_requirements.json
  - tdpsa_requirements: jurisdictions/united_states/states/texas/tdpsa_requirements.json
---
question: "Step 4: Gap Analysis"
subquestion: |
  Now we'll compare your current privacy practices against the requirements of applicable laws.
  
  This will identify gaps that need to be addressed and generate remediation recommendations.

continue button field: show_gap_analysis_intro
continue button label: "Perform Analysis"
---
# Trigger gap analysis after intro
code: |
  # Perform gap analysis after intro is shown
  if show_gap_analysis_intro:
    compliance_gaps = perform_gap_analysis()
    gap_report = generate_gap_report()
---
code: |
  def perform_gap_analysis():
    """Compare current practices against regulatory requirements using JSON data"""
    gaps = {
      "policy_gaps": [],
      "operational_gaps": [],
      "documentation_gaps": [],
      "technical_gaps": []
    }
    
    jurisdiction_configs = {
      'gdpr': gdpr_requirements,
      'ccpa': ccpa_requirements,
      'tdpsa': tdpsa_requirements
    }
    
    # Analyze each applicable jurisdiction using JSON requirements
    for jurisdiction_id in applicable_jurisdictions:
      if jurisdiction_id in jurisdiction_configs:
        analyze_jurisdiction_gaps(jurisdiction_id, jurisdiction_configs[jurisdiction_id], gaps)
    
    return gaps
  
  def analyze_jurisdiction_gaps(jurisdiction_id, jurisdiction_config, gaps):
    """Analyze gaps for a specific jurisdiction using JSON requirements"""
    requirements = jurisdiction_config.get('requirements', [])
    
    for requirement in requirements:
      # Check if requirement is applicable
      if is_requirement_applicable(requirement, jurisdiction_id):
        # Analyze compliance for this requirement
        gap_info = check_requirement_compliance(requirement, jurisdiction_id)
        if gap_info:
          # Categorize the gap
          category = map_requirement_to_category(requirement.get('category', 'operational'))
          gaps[category].append(gap_info)
  
  def is_requirement_applicable(requirement, jurisdiction_id):
    """Check if a requirement applies based on current conditions"""
    applicable_when = requirement.get('applicableWhen')
    if not applicable_when:
      return True
    
    # Simple applicability check - can be enhanced based on JSON structure
    if isinstance(applicable_when, dict):
      if 'any' in applicable_when:
        # Check if any condition is met
        conditions = applicable_when['any']
        return any(check_applicability_condition(condition) for condition in conditions)
      elif 'field' in applicable_when:
        # Single field condition
        return check_applicability_condition(applicable_when)
    
    return True
  
  def check_applicability_condition(condition):
    """Check individual applicability condition"""
    if isinstance(condition, str):
      # Simple field name check
      return globals().get(condition, False)
    elif isinstance(condition, dict):
      field_name = condition.get('field')
      operator = condition.get('operator', 'equals')
      value = condition.get('value')
      
      field_value = globals().get(field_name)
      
      if operator == 'equals':
        return field_value == value
      elif operator == 'greater_than':
        return field_value > value if field_value else False
      elif operator == 'contains':
        return value in field_value if field_value else False
    
    return False
  
  def check_requirement_compliance(requirement, jurisdiction_id):
    """Check if current practices meet this requirement"""
    req_id = requirement.get('id')
    description = requirement.get('description')
    severity = requirement.get('severity', 'medium')
    title = requirement.get('title', description)
    
    # Map requirement IDs to compliance checks
    compliance_check = get_compliance_check_function(req_id)
    
    if compliance_check and not compliance_check():
      return {
        "id": req_id,
        "title": title,
        "description": description,
        "severity": severity,
        "jurisdiction": jurisdiction_id,
        "remediation": get_remediation_text(requirement)
      }
    
    return None
  
  def get_compliance_check_function(req_id):
    """Return compliance check function for specific requirement"""
    compliance_checks = {
      # Privacy Policy Requirements
      'gdpr-trans-1': lambda: has_existing_policy,
      'ccpa-notice-1': lambda: has_existing_policy,
      'ccpa-notice-2': lambda: has_existing_policy,
      'tdpsa-trans-1': lambda: has_existing_policy,
      'tdpsa-trans-2': lambda: has_existing_policy,
      
      # Individual Rights Requirements  
      'gdpr-rights-1': lambda: has_dsr_procedures,
      'gdpr-rights-2': lambda: has_dsr_procedures,
      'gdpr-rights-3': lambda: has_dsr_procedures,
      'gdpr-rights-5': lambda: has_dsr_procedures,
      'gdpr-rights-6': lambda: has_dsr_procedures,
      'ccpa-rights-1': lambda: has_dsr_procedures,
      'ccpa-rights-2': lambda: has_dsr_procedures,
      'ccpa-rights-5': lambda: has_dsr_procedures,
      'tdpsa-rights-1': lambda: has_dsr_procedures,
      'tdpsa-rights-2': lambda: has_dsr_procedures,
      'tdpsa-rights-3': lambda: has_dsr_procedures,
      'tdpsa-rights-4': lambda: has_dsr_procedures,
      
      # Security Requirements
      'gdpr-protection-2': lambda: uses_encryption and has_access_controls,
      'ccpa-security-1': lambda: uses_encryption and has_access_controls,
      'tdpsa-processing-3': lambda: uses_encryption and has_access_controls,
      
      # Breach Response Requirements
      'gdpr-protection-3': lambda: has_breach_plan,
      'gdpr-protection-4': lambda: has_breach_plan,
      'tdpsa-security-1': lambda: has_breach_plan,
      
      # Documentation Requirements
      'gdpr-accountability-1': lambda: has_retention_policy,
      'tdpsa-processing-1': lambda: has_retention_policy,
      
      # Training Requirements
      'ccpa-training-1': lambda: provides_security_training,
      
      # Opt-out Requirements (for applicable businesses)
      'ccpa-rights-3': lambda: not sells_personal_info or (defined('has_optout_sale_process') and has_optout_sale_process),
      'ccpa-opt-out-1': lambda: not sells_personal_info or (defined('has_optout_sale_process') and has_optout_sale_process),
      'tdpsa-rights-5': lambda: not defined('processes_targeted_advertising') or (defined('has_optout_targeting_process') and has_optout_targeting_process),
      'tdpsa-rights-6': lambda: not sells_personal_info or (defined('has_optout_sale_process') and has_optout_sale_process)
    }
    
    return compliance_checks.get(req_id)
  
  def get_remediation_text(requirement):
    """Extract remediation guidance from requirement"""
    # Look for remediation in compliance checks
    compliance_checks = requirement.get('complianceChecks', [])
    remediation_parts = []
    
    for check in compliance_checks:
      description = check.get('description', '')
      if description:
        remediation_parts.append(description)
    
    if remediation_parts:
      return '; '.join(remediation_parts)
    
    # Fallback to generic remediation
    return f"Implement controls to meet {requirement.get('title', 'this requirement')}"
  
  def map_requirement_to_category(category):
    """Map JSON requirement categories to gap categories"""
    category_mapping = {
      'transparency': 'policy_gaps',
      'notice_requirements': 'policy_gaps',
      'consumer_rights': 'operational_gaps',
      'individual_rights': 'operational_gaps',
      'data_protection': 'technical_gaps',
      'security': 'technical_gaps',
      'data_security': 'technical_gaps',
      'accountability': 'documentation_gaps',
      'contracts': 'documentation_gaps',
      'service_providers': 'documentation_gaps',
      'data_transfers': 'operational_gaps',
      'opt_out_requirements': 'operational_gaps',
      'children_data': 'operational_gaps',
      'sensitive_data': 'operational_gaps',
      'lawful_basis': 'documentation_gaps'
    }
    
    return category_mapping.get(category, 'operational_gaps')
  
  def generate_gap_report():
    """Generate formatted gap analysis report using JSON data"""
    report = {
      "summary": {
        "total_gaps": sum(len(gaps) for gaps in compliance_gaps.values()),
        "high_severity": sum(1 for category in compliance_gaps.values() 
                            for gap in category if gap["severity"] == "high"),
        "medium_severity": sum(1 for category in compliance_gaps.values() 
                              for gap in category if gap["severity"] == "medium"),
        "low_severity": sum(1 for category in compliance_gaps.values() 
                           for gap in category if gap["severity"] == "low")
      },
      "gaps_by_category": compliance_gaps,
      "gaps_by_jurisdiction": organize_gaps_by_jurisdiction(),
      "remediation_plan": create_remediation_plan()
    }
    
    return report
  
  def organize_gaps_by_jurisdiction():
    """Reorganize gaps by jurisdiction for reporting"""
    jurisdiction_gaps = {}
    
    for jurisdiction_id in applicable_jurisdictions:
      jurisdiction_gaps[jurisdiction_id] = {
        "policy_gaps": [gap for gap in compliance_gaps["policy_gaps"] if gap["jurisdiction"] == jurisdiction_id],
        "operational_gaps": [gap for gap in compliance_gaps["operational_gaps"] if gap["jurisdiction"] == jurisdiction_id],
        "documentation_gaps": [gap for gap in compliance_gaps["documentation_gaps"] if gap["jurisdiction"] == jurisdiction_id],
        "technical_gaps": [gap for gap in compliance_gaps["technical_gaps"] if gap["jurisdiction"] == jurisdiction_id]
      }
    
    return jurisdiction_gaps
  
  def create_remediation_plan():
    """Create prioritized remediation plan"""
    remediation_items = []
    
    # Extract all gaps and sort by severity
    all_gaps = []
    for category, gaps in compliance_gaps.items():
      all_gaps.extend(gaps)
    
    # Sort by severity
    severity_order = {"high": 0, "medium": 1, "low": 2}
    all_gaps.sort(key=lambda x: severity_order.get(x["severity"], 3))
    
    # Create remediation items
    for gap in all_gaps:
      remediation_items.append({
        "description": gap["remediation"],
        "severity": gap["severity"],
        "jurisdiction": gap["jurisdiction"],
        "timeframe": "30 days" if gap["severity"] == "high" else "60 days" if gap["severity"] == "medium" else "90 days"
      })
    
    return remediation_items
---
# Gap summary screen
question: Compliance Gaps Summary
subquestion: |
  Based on our analysis, we've identified ${gap_report["summary"]["total_gaps"]} compliance gaps:
  
  ## Summary
  
  * **High Severity Gaps**: ${gap_report["summary"]["high_severity"]}
  * **Medium Severity Gaps**: ${gap_report["summary"]["medium_severity"]}
  * **Low Severity Gaps**: ${gap_report["summary"]["low_severity"]}
  
  ## Key Compliance Gaps by Jurisdiction
  
  % for jurisdiction_id, jurisdiction_data in gap_report["gaps_by_jurisdiction"].items():
  **${jurisdiction_id.upper()}**:
  % for category, gaps in jurisdiction_data.items():
  % if gaps:
  ${category.replace("_", " ").title()}:
  % for gap in gaps:
  * ${gap["description"]} (${gap["severity"].title()})
  % endfor
  % endif
  % endfor
  
  % endfor
  
  A detailed gap analysis report and remediation plan will be included in your documentation package.
continue button field: continue_gap_summary
continue button label: "Continue to Document Generation"
---