# modules/gap_analysis.yml - Gap Analysis Module
---
# Gap analysis module - compares current practices to requirements
---
question: "Step 4: Gap Analysis"
subquestion: |
  Now we'll compare your current privacy practices against the requirements of applicable laws.
  
  This will identify gaps that need to be addressed and generate remediation recommendations.

continue button field: show_gap_analysis_intro
continue button label: "Let's go"
---
code: |
  def perform_gap_analysis():
    """Compare current practices against regulatory requirements"""
    global compliance_gaps
    compliance_gaps = {
      "policy_gaps": [],
      "operational_gaps": [],
      "documentation_gaps": [],
      "technical_gaps": []
    }
    
    # Analyze each applicable jurisdiction
    for jurisdiction_id in applicable_jurisdictions:
      analyze_jurisdiction_gaps(jurisdiction_id)
    
    return compliance_gaps
  
  def analyze_jurisdiction_gaps(jurisdiction_id):
    """Analyze gaps for a specific jurisdiction"""
    requirements = jurisdiction_requirements.get(jurisdiction_id, {})
    
    if jurisdiction_id == "gdpr":
      analyze_gdpr_gaps()
    elif jurisdiction_id == "ccpa":
      analyze_ccpa_gaps()
    elif jurisdiction_id == "tdpsa":
      analyze_tdpsa_gaps()
    elif jurisdiction_id == "hipaa":
      analyze_hipaa_gaps()
    elif jurisdiction_id == "glba":
      analyze_glba_gaps()
  
  def analyze_gdpr_gaps():
    """Analyze GDPR-specific compliance gaps"""
    # Policy gaps
    if not has_existing_policy:
      compliance_gaps["policy_gaps"].append({
        "id": "gdpr-p-001",
        "description": "No privacy policy exists",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Create GDPR-compliant privacy policy"
      })
    
    # Operational gaps
    if not documents_consent:
      compliance_gaps["operational_gaps"].append({
        "id": "gdpr-o-001",
        "description": "No system for documenting and storing consent",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Implement consent management system"
      })
    
    # Check for individual rights processes
    if not has_access_process:
      compliance_gaps["operational_gaps"].append({
        "id": "gdpr-o-002",
        "description": "No process for handling data subject access requests",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Implement data subject access request process"
      })
      
    if not has_deletion_process:
      compliance_gaps["operational_gaps"].append({
        "id": "gdpr-o-003",
        "description": "No process for handling right to erasure requests",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Implement right to erasure process"
      })
      
    if not has_portability_process:
      compliance_gaps["operational_gaps"].append({
        "id": "gdpr-o-004",
        "description": "No process for handling data portability requests",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Implement data portability process"
      })
      
    if not has_correction_process:
      compliance_gaps["operational_gaps"].append({
        "id": "gdpr-o-005",
        "description": "No process for handling rectification requests",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Implement rectification process"
      })
      
    if not has_objection_process:
      compliance_gaps["operational_gaps"].append({
        "id": "gdpr-o-006",
        "description": "No process for handling objection requests",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Implement objection process"
      })
    
    # Check for international transfer safeguards if applicable
    if transfers_data_internationally and 'None currently in place' in international_transfer_safeguards:
      compliance_gaps["operational_gaps"].append({
        "id": "gdpr-o-007",
        "description": "No appropriate safeguards for international data transfers",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Implement appropriate transfer mechanisms such as Standard Contractual Clauses (SCCs)"
      })
      
    # Documentation gaps
    if not has_retention_policy:
      compliance_gaps["documentation_gaps"].append({
        "id": "gdpr-d-001",
        "description": "No written data retention policy",
        "severity": "medium",
        "jurisdiction": "gdpr",
        "remediation": "Create data retention policy specifying retention periods for different categories of data"
      })
      
    if shares_with_third_parties and not has_dpas:
      compliance_gaps["documentation_gaps"].append({
        "id": "gdpr-d-002",
        "description": "No data processing agreements with third parties",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Implement data processing agreements with all processors"
      })
      
    if not has_breach_plan:
      compliance_gaps["documentation_gaps"].append({
        "id": "gdpr-d-003",
        "description": "No data breach response plan",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Create data breach response plan with 72-hour notification procedure"
      })
      
    # Technical gaps
    if not uses_encryption:
      compliance_gaps["technical_gaps"].append({
        "id": "gdpr-t-001",
        "description": "No encryption for personal data",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Implement encryption for personal data in transit and at rest"
      })
      
    if not has_access_controls:
      compliance_gaps["technical_gaps"].append({
        "id": "gdpr-t-002",
        "description": "No access controls for personal data",
        "severity": "high",
        "jurisdiction": "gdpr",
        "remediation": "Implement role-based access controls for personal data"
      })
  
  def analyze_ccpa_gaps():
    """Analyze CCPA-specific compliance gaps"""
    # Policy gaps
    if not has_existing_policy:
      compliance_gaps["policy_gaps"].append({
        "id": "ccpa-p-001",
        "description": "No privacy policy exists",
        "severity": "high",
        "jurisdiction": "ccpa",
        "remediation": "Create CCPA-compliant privacy policy"
      })
    
    # Operational gaps
    if sells_personal_info and not has_optout_sale_process:
      compliance_gaps["operational_gaps"].append({
        "id": "ccpa-o-001",
        "description": "No process for consumers to opt-out of sale of personal information",
        "severity": "high",
        "jurisdiction": "ccpa",
        "remediation": "Implement 'Do Not Sell My Personal Information' mechanism"
      })
      
    if not has_access_process:
      compliance_gaps["operational_gaps"].append({
        "id": "ccpa-o-002",
        "description": "No process for handling consumer access requests",
        "severity": "high",
        "jurisdiction": "ccpa",
        "remediation": "Implement consumer access request process"
      })
      
    if not has_deletion_process:
      compliance_gaps["operational_gaps"].append({
        "id": "ccpa-o-003",
        "description": "No process for handling deletion requests",
        "severity": "high",
        "jurisdiction": "ccpa",
        "remediation": "Implement deletion request process"
      })
      
    # Documentation gaps
    if not has_dsr_procedures:
      compliance_gaps["documentation_gaps"].append({
        "id": "ccpa-d-001",
        "description": "No documented procedures for handling consumer requests",
        "severity": "medium",
        "jurisdiction": "ccpa",
        "remediation": "Create documented procedures for handling consumer requests"
      })
  
  def analyze_tdpsa_gaps():
    """Analyze TDPSA-specific compliance gaps"""
    # Policy gaps
    if not has_existing_policy:
      compliance_gaps["policy_gaps"].append({
        "id": "tdpsa-p-001",
        "description": "No privacy policy exists",
        "severity": "high",
        "jurisdiction": "tdpsa",
        "remediation": "Create TDPSA-compliant privacy policy"
      })
    
    # Operational gaps
    if not has_access_process:
      compliance_gaps["operational_gaps"].append({
        "id": "tdpsa-o-001",
        "description": "No process for consumers to access their personal information",
        "severity": "high",
        "jurisdiction": "tdpsa",
        "remediation": "Implement consumer data access request process"
      })
      
    if not has_correction_process:
      compliance_gaps["operational_gaps"].append({
        "id": "tdpsa-o-002",
        "description": "No process for consumers to correct their personal information",
        "severity": "high",
        "jurisdiction": "tdpsa",
        "remediation": "Implement correction request process"
      })
      
    if not has_deletion_process:
      compliance_gaps["operational_gaps"].append({
        "id": "tdpsa-o-003",
        "description": "No process for consumers to delete their personal information",
        "severity": "high",
        "jurisdiction": "tdpsa",
        "remediation": "Implement deletion request process"
      })
      
    if not has_portability_process:
      compliance_gaps["operational_gaps"].append({
        "id": "tdpsa-o-004",
        "description": "No process for consumers to request portable data",
        "severity": "high",
        "jurisdiction": "tdpsa",
        "remediation": "Implement data portability process"
      })
      
    if not has_optout_targeting_process:
      compliance_gaps["operational_gaps"].append({
        "id": "tdpsa-o-005",
        "description": "No process for consumers to opt-out of targeted advertising",
        "severity": "high",
        "jurisdiction": "tdpsa",
        "remediation": "Implement opt-out process for targeted advertising"
      })
      
    if sells_personal_info and not has_optout_sale_process:
      compliance_gaps["operational_gaps"].append({
        "id": "tdpsa-o-006",
        "description": "No process for consumers to opt-out of sale of personal information",
        "severity": "high",
        "jurisdiction": "tdpsa",
        "remediation": "Implement opt-out process for sale of personal information"
      })
  
  def analyze_hipaa_gaps():
    """Analyze HIPAA-specific compliance gaps"""
    # If HIPAA applies but variables not defined, skip analysis
    if not defined('has_privacy_officer'):
      return
    
    # Policy gaps
    if not has_npp:
      compliance_gaps["policy_gaps"].append({
        "id": "hipaa-p-001",
        "description": "No Notice of Privacy Practices (NPP)",
        "severity": "high",
        "jurisdiction": "hipaa",
        "remediation": "Create HIPAA-compliant Notice of Privacy Practices"
      })
    
    # Operational gaps
    if not has_privacy_officer:
      compliance_gaps["operational_gaps"].append({
        "id": "hipaa-o-001",
        "description": "No designated Privacy Officer",
        "severity": "high",
        "jurisdiction": "hipaa",
        "remediation": "Designate a Privacy Officer"
      })
      
    if not has_security_officer:
      compliance_gaps["operational_gaps"].append({
        "id": "hipaa-o-002",
        "description": "No designated Security Officer",
        "severity": "high",
        "jurisdiction": "hipaa",
        "remediation": "Designate a Security Officer"
      })
      
    if not recent_hipaa_risk_assessment:
      compliance_gaps["operational_gaps"].append({
        "id": "hipaa-o-003",
        "description": "No recent HIPAA Security Risk Assessment",
        "severity": "high",
        "jurisdiction": "hipaa",
        "remediation": "Conduct a comprehensive HIPAA Security Risk Assessment"
      })
      
    if not has_baas:
      compliance_gaps["documentation_gaps"].append({
        "id": "hipaa-d-001",
        "description": "No Business Associate Agreements (BAAs) with vendors who access PHI",
        "severity": "high",
        "jurisdiction": "hipaa",
        "remediation": "Implement BAAs with all vendors who access PHI"
      })
      
    if not has_authorization_process:
      compliance_gaps["operational_gaps"].append({
        "id": "hipaa-o-004",
        "description": "No process for authorizations for uses and disclosures of PHI",
        "severity": "high",
        "jurisdiction": "hipaa",
        "remediation": "Implement authorization process for uses and disclosures of PHI"
      })
      
    if not has_accounting_disclosures:
      compliance_gaps["operational_gaps"].append({
        "id": "hipaa-o-005",
        "description": "No process for accounting of disclosures",
        "severity": "high",
        "jurisdiction": "hipaa",
        "remediation": "Implement process for accounting of disclosures"
      })
      
    if not has_sanctions_policy:
      compliance_gaps["documentation_gaps"].append({
        "id": "hipaa-d-002",
        "description": "No sanctions policy for privacy/security violations",
        "severity": "medium",
        "jurisdiction": "hipaa",
        "remediation": "Create sanctions policy for privacy/security violations"
      })
      
    if not has_emergency_access:
      compliance_gaps["documentation_gaps"].append({
        "id": "hipaa-d-003",
        "description": "No documented emergency access procedure",
        "severity": "medium",
        "jurisdiction": "hipaa",
        "remediation": "Create documented emergency access procedure"
      })
  
  def analyze_glba_gaps():
    """Analyze GLBA-specific compliance gaps"""
    # If GLBA applies but variables not defined, skip analysis
    if not defined('provides_initial_notices'):
      return
    
    # Policy gaps
    if not provides_initial_notices:
      compliance_gaps["policy_gaps"].append({
        "id": "glba-p-001",
        "description": "No initial privacy notices provided to customers",
        "severity": "high",
        "jurisdiction": "glba",
        "remediation": "Create and distribute initial privacy notices to customers"
      })
      
    if not provides_annual_notices:
      compliance_gaps["policy_gaps"].append({
        "id": "glba-p-002",
        "description": "No annual privacy notices provided to customers",
        "severity": "high",
        "jurisdiction": "glba",
        "remediation": "Create and distribute annual privacy notices to customers"
      })
    
    # Operational gaps
    if not has_safeguards_program:
      compliance_gaps["operational_gaps"].append({
        "id": "glba-o-001",
        "description": "No information security program as required by the Safeguards Rule",
        "severity": "high",
        "jurisdiction": "glba",
        "remediation": "Implement information security program compliant with the Safeguards Rule"
      })
      
    if not has_designated_individual:
      compliance_gaps["operational_gaps"].append({
        "id": "glba-o-002",
        "description": "No designated individual to implement and supervise information security program",
        "severity": "high",
        "jurisdiction": "glba",
        "remediation": "Designate qualified individual to implement and supervise information security program"
      })
      
    if not conducted_safeguards_risk_assessment:
      compliance_gaps["operational_gaps"].append({
        "id": "glba-o-003",
        "description": "No risk assessment of information security program",
        "severity": "high",
        "jurisdiction": "glba",
        "remediation": "Conduct risk assessment of information security program"
      })
      
    # Documentation gaps
    if not has_written_safeguards:
      compliance_gaps["documentation_gaps"].append({
        "id": "glba-d-001",
        "description": "No written policies and procedures for information security program",
        "severity": "high",
        "jurisdiction": "glba",
        "remediation": "Create written policies and procedures for information security program"
      })
      
    if not tests_safeguards:
      compliance_gaps["operational_gaps"].append({
        "id": "glba-o-004",
        "description": "No monitoring and testing of information security program effectiveness",
        "severity": "medium",
        "jurisdiction": "glba",
        "remediation": "Implement monitoring and testing of information security program"
      })
      
    if not requires_provider_safeguards:
      compliance_gaps["operational_gaps"].append({
        "id": "glba-o-005",
        "description": "No requirements for service providers to maintain appropriate safeguards",
        "severity": "high",
        "jurisdiction": "glba",
        "remediation": "Implement requirements for service providers to maintain appropriate safeguards"
      })
  
  def generate_gap_report():
    """Generate formatted gap analysis report"""
    global gap_report
    
    gap_report = {
      "summary": {
        "total_gaps": sum(len(gaps) for gaps in compliance_gaps.values()),
        "high_severity": sum(1 for category in compliance_gaps.values() 
                            for gap in category if gap["severity"] == "high"),
        "medium_severity": sum(1 for category in compliance_gaps.values() 
                              for gap in category if gap["severity"] == "medium"),
        "low_severity": sum(1 for category in compliance_gaps.values() 
                           for gap in category if gap["severity"] == "low")
      },
      "gaps_by_category": compliance_gaps,
      "gaps_by_jurisdiction": organize_gaps_by_jurisdiction(),
      "remediation_plan": create_remediation_plan()
    }
    
    return gap_report
  
  def organize_gaps_by_jurisdiction():
    """Reorganize gaps by jurisdiction for reporting"""
    jurisdiction_gaps = {}
    
    for jurisdiction_id in applicable_jurisdictions:
      jurisdiction_gaps[jurisdiction_id] = {
        "policy_gaps": [gap for gap in compliance_gaps["policy_gaps"] if gap["jurisdiction"] == jurisdiction_id],
        "operational_gaps": [gap for gap in compliance_gaps["operational_gaps"] if gap["jurisdiction"] == jurisdiction_id],
        "documentation_gaps": [gap for gap in compliance_gaps["documentation_gaps"] if gap["jurisdiction"] == jurisdiction_id],
        "technical_gaps": [gap for gap in compliance_gaps["technical_gaps"] if gap["jurisdiction"] == jurisdiction_id]
      }
    
    return jurisdiction_gaps
  
  def create_remediation_plan():
    """Create prioritized remediation plan"""
    remediation_items = []
    
    # Extract all gaps and sort by severity
    all_gaps = []
    for category, gaps in compliance_gaps.items():
      all_gaps.extend(gaps)
    
    # Sort by severity
    severity_order = {"high": 0, "medium": 1, "low": 2}
    all_gaps.sort(key=lambda x: severity_order.get(x["severity"], 3))
    
    # Create remediation items
    for gap in all_gaps:
      remediation_items.append({
        "description": gap["remediation"],
        "severity": gap["severity"],
        "jurisdiction": gap["jurisdiction"],
        "timeframe": "30 days" if gap["severity"] == "high" else "60 days" if gap["severity"] == "medium" else "90 days"
      })
    
    return remediation_items
---
# Gap summary screen
question: Compliance Gaps Summary
subquestion: |
  Based on our analysis, we've identified ${gap_report["summary"]["total_gaps"]} compliance gaps:
  
  ## Summary
  
  * **High Severity Gaps**: ${gap_report["summary"]["high_severity"]}
  * **Medium Severity Gaps**: ${gap_report["summary"]["medium_severity"]}
  * **Low Severity Gaps**: ${gap_report["summary"]["low_severity"]}
  
  ## Key Compliance Gaps by Jurisdiction
  
  % for jurisdiction_id, jurisdiction_data in gap_report["gaps_by_jurisdiction"].items():
  **${jurisdiction_id.upper()}**:
  % for category, gaps in jurisdiction_data.items():
  % if gaps:
  ${category.replace("_", " ").title()}:
  % for gap in gaps:
  * ${gap["description"]} (${gap["severity"].title()})
  % endfor
  % endif
  % endfor
  
  % endfor
  
  A detailed gap analysis report and remediation plan will be included in your documentation package.
continue button field: continue_gap_summary
continue button label: "Let's go"
---
