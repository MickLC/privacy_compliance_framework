---
# Jurisdiction Engine - Pure JSON-Driven Applicability
---
question: |
  Step 7: Privacy Law Analysis
subquestion: |
  Analyzing your business profile against privacy law requirements...
  
  This may take a moment as we evaluate applicable regulations.

continue button field: show_jurisdiction_analysis
continue button label: "Perform Analysis"
---
question: |
  Step 8: Applicable Privacy Laws
subquestion: |
  Based on your business profile, the following privacy laws apply to your organization:
  
  % if applicable_jurisdictions and len(applicable_jurisdictions) > 0:
  % for jurisdiction_id in applicable_jurisdictions:
  ## ${ get_jurisdiction_name(jurisdiction_id) }
  
  **Why this applies:** ${ get_applicability_reason(jurisdiction_id) }
  
  % endfor
  
  ## Analysis Summary
  
  % if "tdpsa" in applicable_jurisdictions:
  **TDPSA Note**: Your business does not qualify for the small business exemption under SBA size standards for NAICS ${ company.naics_code }.
  % endif
  
  % if "ccpa" in applicable_jurisdictions:
  **CCPA Note**: Your business meets the revenue, data volume, or sale thresholds for California privacy law coverage.
  % endif
  
  % if "gdpr" in applicable_jurisdictions:
  **GDPR Note**: Your business operations or data subjects trigger EU privacy law requirements.
  % endif
  
  % if "hipaa" in applicable_jurisdictions:
  **HIPAA Note**: Your healthcare industry classification (NAICS ${ company.naics_code }) requires HIPAA compliance.
  % endif
  
  % if "glba" in applicable_jurisdictions:
  **GLBA Note**: Your financial services industry classification (NAICS ${ company.naics_code }) requires GLBA compliance.
  % endif
  
  % else:
  **No comprehensive privacy laws were found to be applicable** based on the information provided.
  
  This may be because:
  * Your organization falls under small business exemptions
  * You do not process personal data in jurisdictions with comprehensive privacy laws
  * Your data processing volumes are below regulatory thresholds
  
  However, we will still generate basic privacy documentation as best practice.
  % endif
  
  These determinations will guide the privacy documentation we generate for your organization.

continue button field: jurisdiction_analysis_complete
continue button label: "Continue to Document Generation"
---
code: |
  def determine_applicable_jurisdictions():
    """
    Determine applicable jurisdictions using pure JSON logic.
    Memory-efficient: load, process, discard.
    """
    applicable = []
    
    # Get list of available jurisdiction files
    jurisdiction_files = [
      'ccpa_requirements.json',
      'gdpr_requirements.json', 
      'tdpsa_requirements.json'
    ]
    
    for jurisdiction_file in jurisdiction_files:
      try:
        # Fresh load JSON config
        config = load_jurisdiction_config(jurisdiction_file)
        if not config:
          continue
        
        jurisdiction_id = config.get('jurisdictionId')
        if not jurisdiction_id:
          continue
        
        # Evaluate applicability using JSON rules ONLY
        if evaluate_json_applicability(config, get_business_data()):
          applicable.append(jurisdiction_id)
          log(f"Jurisdiction {jurisdiction_id} is applicable via JSON rules")
        else:
          log(f"Jurisdiction {jurisdiction_id} is not applicable via JSON rules")
        
        # Config is automatically garbage collected here - no session storage
        
      except Exception as e:
        log(f"Error evaluating jurisdiction {jurisdiction_file}: {e}")
        continue
    
    # Add sectoral requirements (still needs some hardcoded logic for NAICS detection)
    sectoral = check_sectoral_requirements()
    for jurisdiction in sectoral:
      if jurisdiction not in applicable:
        applicable.append(jurisdiction)
        log(f"Sectoral jurisdiction {jurisdiction} is applicable")
    
    return applicable
  
  def load_jurisdiction_config(filename):
    """Load jurisdiction config fresh from JSON file"""
    try:
      json_file = path_and_mimetype(f'data/sources/{filename}')[0]
      with open(json_file, 'r', encoding='utf-8') as f:
        return json.load(f)
    except Exception as e:
      log(f"Error loading {filename}: {e}")
      return None
  
  def get_business_data():
    """Collect current business data for jurisdiction evaluation"""
    return {
      'company_name': company.name if defined('company.name') else '',
      'naics_code': company.naics_code if defined('company.naics_code') else '',
      'employee_count': company.employee_count if defined('company.employee_count') else 0,
      'annual_revenue': company.annual_revenue if defined('company.annual_revenue') else 0,
      'industry': get_industry_category(company.naics_code) if defined('company.naics_code') else '',
      'business_has_website': business_has_website if defined('business_has_website') else False,
      'business_has_physical_location': business_has_physical_location if defined('business_has_physical_location') else False,
      'states_with_operations': list(states_with_operations.true_values()) if defined('states_with_operations') else [],
      'serves_eu': serves_eu if defined('serves_eu') else False,
      'has_eu_establishment': has_eu_establishment if defined('has_eu_establishment') else False,
      'california_records': california_records if defined('california_records') else 0,
      'texas_records': texas_records if defined('texas_records') else 0,
      'eu_data_subjects': eu_data_subjects if defined('eu_data_subjects') else 0,
      'sells_personal_info': sells_personal_info if defined('sells_personal_info') else False
    }
  
  def evaluate_json_applicability(config, business_data):
    """Evaluate if jurisdiction applies based on JSON applicabilityChecks ONLY"""
    applicability_checks = config.get('applicabilityChecks', [])
    
    if not applicability_checks:
      log(f"No applicabilityChecks found in {config.get('jurisdictionId', 'unknown')} - jurisdiction not applicable")
      return False
    
    # Evaluate JSON applicability rules
    for check in applicability_checks:
      if evaluate_applicability_check(check, business_data):
        return True
    
    return False
  
  def evaluate_applicability_check(check, business_data):
    """Evaluate individual applicability check from JSON"""
    check_type = check.get('type', 'simple')
    
    if check_type == 'compound':
      operator = check.get('operator', 'and')
      conditions = check.get('conditions', [])
      
      if operator == 'and':
        result = all(evaluate_applicability_check(condition, business_data) for condition in conditions)
        log(f"Compound AND check: {result}")
        return result
      elif operator == 'or':
        result = any(evaluate_applicability_check(condition, business_data) for condition in conditions)
        log(f"Compound OR check: {result}")
        return result
      else:
        log(f"Unknown compound operator: {operator}")
        return False
    
    elif check_type == 'custom_function':
      function_name = check.get('function')
      if function_name == 'not_small_business_tdpsa':
        result = not is_small_business_under_tdpsa(
          business_data.get('naics_code'),
          business_data.get('employee_count', 0),
          business_data.get('annual_revenue', 0)
        )
        log(f"Custom function {function_name}: {result}")
        return result
      elif function_name == 'is_healthcare_provider':
        result = str(business_data.get('naics_code', '')).startswith('62')
        log(f"Custom function {function_name}: {result}")
        return result
      elif function_name == 'is_health_plan':
        # Health plans are typically in insurance (524xxx) or HMO codes
        naics = str(business_data.get('naics_code', ''))
        result = naics.startswith('524') or 'health' in business_data.get('industry', '').lower()
        log(f"Custom function {function_name}: {result}")
        return result
      elif function_name == 'is_healthcare_clearinghouse':
        # Healthcare clearinghouses typically in data processing services
        result = str(business_data.get('naics_code', '')).startswith('518')
        log(f"Custom function {function_name}: {result}")
        return result
      elif function_name == 'is_business_associate':
        # Business associates are service providers to healthcare entities
        naics = str(business_data.get('naics_code', ''))
        result = (naics.startswith('541') or naics.startswith('518') or 
                 naics.startswith('561') or naics.startswith('624'))
        log(f"Custom function {function_name}: {result}")
        return result
      else:
        log(f"Unknown custom function: {function_name}")
        return False
    
    else:
      # Simple field check
      field = check.get('field')
      operator = check.get('operator', 'equals')
      value = check.get('value')
      
      if not field:
        log("Missing field in applicability check")
        return False
      
      field_value = business_data.get(field)
      result = evaluate_operator(field_value, operator, value)
      log(f"Simple check {field} {operator} {value}: {field_value} -> {result}")
      return result
  
  def evaluate_operator(field_value, operator, value):
    """Evaluate operator between field value and expected value"""
    if operator == 'equals':
      return field_value == value
    elif operator == 'not_equals':
      return field_value != value
    elif operator == 'greater_than':
      try:
        return float(field_value) > float(value)
      except (ValueError, TypeError):
        return False
    elif operator == 'greater_than_or_equal':
      try:
        return float(field_value) >= float(value)
      except (ValueError, TypeError):
        return False
    elif operator == 'less_than':
      try:
        return float(field_value) < float(value)
      except (ValueError, TypeError):
        return False
    elif operator == 'contains':
      if isinstance(field_value, list):
        return value in field_value
      elif isinstance(field_value, str):
        return value in field_value
      else:
        return False
    elif operator == 'not_contains':
      if isinstance(field_value, list):
        return value not in field_value
      elif isinstance(field_value, str):
        return value not in field_value
      else:
        return True
    else:
      log(f"Unknown operator: {operator}")
      return False
  
  def is_small_business_under_tdpsa(naics_code, employee_count, annual_revenue):
    """Determine TDPSA small business exemption using fresh NAICS data"""
    if not naics_code:
      # Use general TDPSA small business definition
      return employee_count < 100 and annual_revenue < 10000000
    
    try:
      # Load fresh NAICS data
      naics_file = path_and_mimetype('data/sources/naics.json')[0]
      with open(naics_file, 'r', encoding='utf-8') as f:
        naics_data = json.load(f)
      
      # Find specific NAICS entry
      naics_info = next((item for item in naics_data if str(item.get('id')) == str(naics_code)), None)
      
      if not naics_info:
        # Fallback to general TDPSA definition
        return employee_count < 100 and annual_revenue < 10000000
      
      # Get SBA size standards
      employee_limit = naics_info.get('employeeCountLimit')
      revenue_limit = naics_info.get('revenueLimit')
      
      # Convert revenue limit from millions to dollars
      if revenue_limit and revenue_limit < 1000:
        revenue_limit = revenue_limit * 1000000
      
      # Check SBA standards
      sba_qualifies_as_small = True
      
      if employee_limit:
        sba_qualifies_as_small = sba_qualifies_as_small and (employee_count <= employee_limit)
      
      if revenue_limit:
        sba_qualifies_as_small = sba_qualifies_as_small and (annual_revenue <= revenue_limit)
      
      # Check TDPSA general definition
      tdpsa_qualifies_as_small = employee_count < 100 and annual_revenue < 10000000
      
      # Small if meets either standard
      return sba_qualifies_as_small or tdpsa_qualifies_as_small
      
    except Exception as e:
      log(f"SBA size determination error: {e}")
      # Conservative fallback
      return employee_count < 100 and annual_revenue < 10000000
  
  def check_sectoral_requirements():
    """Check for sector-specific requirements and add to applicable jurisdictions"""
    business_data = get_business_data()
    naics_code = business_data.get('naics_code', '')
    
    sectoral_jurisdictions = []
    
    # HIPAA check - Healthcare sector
    if str(naics_code).startswith('62'):  # Healthcare and Social Assistance
      sectoral_jurisdictions.append('hipaa')
      log(f"HIPAA applies due to healthcare NAICS code {naics_code}")
    
    # GLBA check - Financial Services sector  
    if str(naics_code).startswith('52'):  # Finance and Insurance
      sectoral_jurisdictions.append('glba')
      log(f"GLBA applies due to financial services NAICS code {naics_code}")
    
    return sectoral_jurisdictions
  
  def get_jurisdiction_name(jurisdiction_id):
    """Get display name for jurisdiction"""
    names = {
      'ccpa': 'California Consumer Privacy Act / California Privacy Rights Act (CCPA/CPRA)',
      'gdpr': 'General Data Protection Regulation (GDPR)',
      'tdpsa': 'Texas Data Privacy and Security Act (TDPSA)',
      'hipaa': 'Health Insurance Portability and Accountability Act (HIPAA)',
      'glba': 'Gramm-Leach-Bliley Act (GLBA)'
    }
    return names.get(jurisdiction_id, jurisdiction_id.upper())
  
  def get_applicability_reason(jurisdiction_id):
    """Get reason why jurisdiction applies - enhanced for JSON-driven approach"""
    business_data = get_business_data()
    
    if jurisdiction_id == 'ccpa':
      reasons = []
      if 'California' in business_data.get('states_with_operations', []):
        reasons.append("operates in California")
      if business_data.get('california_records', 0) > 0:
        reasons.append(f"processes {business_data.get('california_records', 0):,} California residents' data")
      
      # Add qualifying thresholds that were met
      if business_data.get('annual_revenue', 0) >= 25000000:
        reasons.append("meets $25M revenue threshold")
      if business_data.get('california_records', 0) >= 100000:
        reasons.append("processes 100K+ California records")
      if business_data.get('california_records', 0) >= 50000 and business_data.get('sells_personal_info'):
        reasons.append("processes 50K+ California records and sells personal information")
      
      return "Your business " + " and ".join(reasons) if reasons else "meets CCPA requirements via JSON rules"
    
    elif jurisdiction_id == 'gdpr':
      reasons = []
      if business_data.get('serves_eu'):
        reasons.append("serves EU customers")
      if business_data.get('has_eu_establishment'):
        reasons.append("has EU establishment")
      if business_data.get('eu_data_subjects', 0) > 0:
        reasons.append(f"processes {business_data.get('eu_data_subjects', 0):,} EU data subjects")
      return "Your business " + " and ".join(reasons) if reasons else "meets GDPR requirements via JSON rules"
    
    elif jurisdiction_id == 'tdpsa':
      reasons = []
      if 'Texas' in business_data.get('states_with_operations', []):
        reasons.append("operates in Texas")
      if business_data.get('texas_records', 0) > 0:
        reasons.append(f"processes {business_data.get('texas_records', 0):,} Texas residents' data")
      if business_data.get('texas_records', 0) >= 100000:
        reasons.append("meets 100K+ Texas records threshold")
      if business_data.get('texas_records', 0) >= 25000 and business_data.get('sells_personal_info'):
        reasons.append("meets 25K+ Texas records threshold with sale of personal information")
      if not is_small_business_under_tdpsa(business_data.get('naics_code'), business_data.get('employee_count', 0), business_data.get('annual_revenue', 0)):
        reasons.append("does not qualify for small business exemption")
      return "Your business " + " and ".join(reasons) if reasons else "meets TDPSA requirements via JSON rules"
    
    elif jurisdiction_id == 'hipaa':
      naics_code = business_data.get('naics_code', '')
      return f"operates in healthcare sector (NAICS {naics_code})"
    
    elif jurisdiction_id == 'glba':
      naics_code = business_data.get('naics_code', '')
      return f"operates in financial services sector (NAICS {naics_code})"
    
    else:
      return "meets applicable criteria via JSON rules"